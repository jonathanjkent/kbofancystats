history <- history %>% filter(home %in% clublist & away %in% clublist)
histresults <- rbind(history,results)
# Model
weights <- weights_dc(histresults$date, xi=xi.set)
model <- goalmodel(goals1 = histresults$home.score, goals2 = histresults$away.score,
team1 = histresults$home, team2=histresults$away, weights = weights, rs=TRUE)
# Simulate
print("Simulating...")
fase.2.sims <- NA
fase.2.nsim <- 100
for (i in 1:fase.2.nsim){
fase.1 <- aa.fase.2 %>% filter(sim.number == i)
fase.2.clubs <- as.character(unique(fase.1$team))
# Dummy Schedule
fase.2.sked <- data.frame(rep(fase.2.clubs, each = 6), rep(fase.2.clubs, times = 6))
names(fase.2.sked) <- c("home","away")
fase.2.sked <- fase.2.sked %>% filter(home != away)
predictions <- predict_result(model, team1=fase.2.sked$home, team2=fase.2.sked$away, return_df = TRUE)
predictions$random <- runif((nrow(predictions)),0,1)
predictions <- mutate(predictions, team1.points = ifelse(random < p1, 3,
ifelse(random > (1-p2), 0, 1)))
predictions <- mutate(predictions, team2.points = ifelse(team1.points == 0, 3,
ifelse(team1.points == 3, 0, 1)))
pred.home <- predictions %>% select(team1,team1.points)
names(pred.home) <- c("team","points")
pred.away <- predictions %>% select(team2,team2.points)
names(pred.away) <- c("team","points")
pred.all <- rbind(pred.home,pred.away)
pred.total <- pred.all %>% group_by(team) %>% summarize(fase.2.points = sum(points))
fase.2.results <- fase.1 %>% left_join(pred.total, by = "team")
fase.2.results$final.points <- fase.2.results$points + fase.2.results$fase.2.points
fase.2.results$tiebreak <- runif((nrow(fase.2.results)),0,1)
fase.2.results <- fase.2.results %>% arrange(tiebreak) %>% arrange(desc(final.points))
fase.2.results$rank <- 1:6
fase.2.sims <- rbind(fase.2.sims, fase.2.results)
}
fase.2.sims <- fase.2.sims[2:nrow(fase.2.sims),]
print("Likelihood of Direct Ascension from Segona Fase:")
print(fase.2.sims %>% filter(rank <= 2) %>% group_by(team) %>% count() %>% mutate(n = n/fase.2.nsim*100) %>% arrange(desc(n)))
j<-1
playoff.sim <- fase.2.sims %>% filter(sim.number == j & rank > 2) %>% select(team,sim.number,points)
playoff.sim2 <- aa.playoff %>% filter(sim.number == j)
playoff.sim <- rbind(playoff.sim,playoff.sim2)
playoff.sim
View(fase.2.sims)
seed.1 <- as.character(playoff.sim[1,1])
seed.2 <- as.character(playoff.sim[2,1])
seed.1 <- as.character(playoff.sim[1,1])
seed.2 <- as.character(playoff.sim[2,1])
seed.3 <- as.character(playoff.sim[3,1])
seed.4 <- as.character(playoff.sim[4,1])
seed.5 <- as.character(playoff.sim[5,1])
seed.6 <- as.character(playoff.sim[6,1])
# Round 1
g1 <- data.frame(seed.3,seed.6)
g1
g1 <- data.frame(seed.3,seed.6)
names(g1) <- ("home","away")
g2 <- data.frame(seed.4,seed.5)
names(g2) <- ("home","away")
# Round 1
g1 <- data.frame(seed.3,seed.6)
names(g1) <- c("home","away")
g2 <- data.frame(seed.4,seed.5)
names(g2) <- c("home","away")
r1 <- rbind(g1,g2)
r1
r1 <- predict_result(model, team1=r1$home, team2=r1$away, return_df = TRUE)
r1
r1$random <- runif((nrow(r1)),0,1)
r1
r1$p1 <- r1$p1 + (r1$pd/2)
r1$p2 <- r1$p2 + (r1$pd/2)
r1
r1 <- mutate(r1, winner = ifelse(random < p1, team1, team2)
}
r1 <- mutate(r1, winner = ifelse(random < p1, team1, team2)
}
r1 <- mutate(r1, winner = ifelse(random < p1, team1, team2))
r1
# Round 2
g1 <- data.frame(seed.1,as.character(r1[1,7]))
g1
# Round 2
g1 <- data.frame(seed.1,as.character(r1[1,7]))
names(g1) <- c("home","away")
g2 <- data.frame(seed.2,as.character(r1[2,7]))
names(g2) <- c("home","away")
r2 <- rbind(g1,g2)
r2
r2 <- predict_result(model, team1=r2$home, team2=r2$away, return_df = TRUE)
r2$random <- runif((nrow(r2)),0,1)
r2$p1 <- r2$p1 + (r2$pd/2)
r2$p2 <- r2$p2 + (r2$pd/2)
r2 <- mutate(r2, winner = ifelse(random < p1, team1, team2))
r2
# Final
final <- data.frame(as.character(r1[1,7]),as.character(r1[2,7]))
final
names(final) <- c("home","away")
final <- predict_result(model, team1=final$home, team2=final$away, return_df = TRUE)
final$random <- runif((nrow(final)),0,1)
final$p1 <- final$p1 + (final$pd/2)
final$p2 <- final$p2 + (final$pd/2)
final <- mutate(final, winner = ifelse(random < p1, team1, team2))
final
playoff.ascend <- NA
playoff.ascend <- rbind(playoff.ascend,final[1,7])
playoff.ascend
suppressMessages(library(tidyverse))
suppressMessages(library(rvest))
suppressMessages(library(goalmodel))
suppressMessages(library(scales))
suppressMessages(library(blogdown))
suppressMessages(library(rmarkdown))
options(dplyr.summarise.inform=F)
setwd("~/Google Drive/Futbol")
# Set parameters
year <- 2021
xi.set <- 0.0025
# Read list of leagues & subgroups
leagues <- read_csv("leagues.csv", col_types = cols())
subgroups <- read_csv("subgroups2020.csv", col_types = cols())
# Select leagues to be updated
leagues <- leagues[11:12,] # Tercera Grups
# Blank datasets
aa.fase.2 <- NA
aa.playoff <- NA
for (k in 1:nrow(leagues)){
# For each league
lg.name <- as.character(leagues[k,1])
lg.code <- as.character(leagues[k,2])
lg.group <- as.numeric(leagues[k,3])
lg.type1 <- as.numeric(leagues[k,4])
lg.type2 <- as.numeric(leagues[k,5])
lg.type3 <- as.numeric(leagues[k,6])
lg.type1name <- as.character(leagues[k,7])
lg.type2name <- as.character(leagues[k,8])
lg.sg <- as.numeric(leagues[k,10])
lg.start2 <- as.numeric(leagues[k,11])
print(paste0("Fase 1: ",lg.name))
print("Scraping...")
# Scrape page
webpage <- read_html(paste0("https://www.resultados-futbol.com/",lg.code,year,"/grupo",lg.group,"/calendario"))
local_data <- html_nodes(webpage,'.equipo1') %>%  html_nodes("a") %>% html_attr("href")
vist_data <- html_nodes(webpage,'.equipo2') %>%  html_nodes("a") %>% html_attr("href")
result_data <- html_nodes(webpage,'.rstd') %>% html_text()
dates_data <- html_nodes(webpage,'.fecha') %>% html_text()
# Create dataset of all games
games <- data.frame(home = local_data, away = vist_data, score = result_data, date = dates_data)
games$score <- str_sub(games$score, -11, -7)
# Filter by subgroup
if (lg.sg > 0){
subteams <- subgroups[,lg.sg]
names(subteams) <- "team"
games <- games %>% filter(home %in% subteams$team)
}
# Recode dates
games <- games %>% separate(date, c("day", "month", "year"), extra = "drop")
games$year <- as.numeric(games$year) + 2000
month <- c("Ago", "Sep", "Oct", "Nov", "Dic", "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul")
month.num <- c(8,9,10,11,12,1,2,3,4,5,6,7)
month.recode <- cbind.data.frame(month,month.num)
games <- games %>% left_join(month.recode, by = "month")
games$date <- as.Date(with(games, paste(year, month.num, day,sep="-")), "%Y-%m-%d")
games <- games %>% select(-day, -month, -year, -month.num)
# Add jornada
teams <- length(unique(games$home))
jornadas <- (teams-1)*2
if (teams %% 2 != 0){
jornadas <- teams*2
}
games$jornada <- rep(1:jornadas, each = (teams/2))
# Separate compeleted and uncompleted games
schedule <- games %>% filter(grepl("x|:|A", games$score) | grepl("x|'|A", games$score) | grepl("x|D|A", games$score)) %>% select(-score)
results <- filter(games, grepl("-", games$score))
results <- filter(results, !grepl("x", results$score))
results <- filter(results, !grepl("'", results$score))
results <- results %>% separate(score, c("home.score", "away.score"), extra = "drop")
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Add in historic results
clublist <- as.character(unique(games$home))
history <- read_csv("gameshistory.csv", col_types = cols()) %>% select(-season,-league)
history <- history %>% filter(home %in% clublist & away %in% clublist)
histresults <- rbind(history,results)
# Create points variables
results <- mutate(results, home.points = ifelse(home.score > away.score, 3,
ifelse(home.score == away.score, 1, 0)))
results <- mutate(results, away.points = ifelse(home.score < away.score, 3,
ifelse(home.score == away.score, 1, 0)))
print("Simulating...")
# Model
weights <- weights_dc(histresults$date, xi=xi.set)
model <- goalmodel(goals1 = histresults$home.score, goals2 = histresults$away.score,
team1 = histresults$home, team2=histresults$away, weights = weights, rs=TRUE)
# Set up results for sims
if (nrow(schedule) > 0){n.sim <- 10000}
if (nrow(schedule) == 0){n.sim <- 1}
results.for.sims <- data.frame(results, sim.number = rep(1:n.sim, each = nrow(results)))
results.for.sims <- results.for.sims %>% select(home, away, sim.number, home.points, away.points, home.score, away.score)
names(results.for.sims) <- c("team1","team2","sim.number","team1.points","team2.points","team1.score","team2.score")
# Simulate unplayed games
if (nrow(schedule) > 0){
predictions <- predict_result(model, team1=schedule$home, team2=schedule$away, return_df = TRUE)
sims <- data.frame(predictions, sim.number = rep(1:n.sim, each = nrow(predictions)))
sims$random <- runif((nrow(sims)),0,1)
sims <- mutate(sims, team1.points = ifelse(random < p1, 3,
ifelse(random > (1-p2), 0, 1)))
sims <- mutate(sims, team2.points = ifelse(team1.points == 0, 3,
ifelse(team1.points == 3, 0, 1)))
# Add in known results
sim.seasons <- sims %>% select(team1,team2,sim.number,team1.points,team2.points)
sim.seasons$team1.score <- sim.seasons$team1.points/2
sim.seasons$team2.score <- sim.seasons$team2.points/2
sim.seasons <- rbind(sim.seasons,results.for.sims)
}
if (nrow(schedule) == 0){sim.seasons <- results.for.sims}
# Add in opposite leg (home/away) for each matchup
sim.seasons$matchup <- paste0(sim.seasons$team1,sim.seasons$team2,sim.seasons$sim.number)
legs <- sim.seasons
legs$matchup <- paste0(sim.seasons$team2,sim.seasons$team1,sim.seasons$sim.number)
legs <- legs %>% select(-team1,-team2,-sim.number)
names(legs) <- c("team2.points.leg","team1.points.leg","team2.score.leg","team1.score.leg","matchup")
sim.seasons <- sim.seasons %>% left_join(legs, by = "matchup")
# Tally matchup points and goal differential
sim.seasons$team1.matchup.points <- sim.seasons$team1.points + sim.seasons$team1.points.leg
sim.seasons$team1.matchup.gd <- sim.seasons$team1.score + sim.seasons$team1.score.leg - sim.seasons$team2.score - sim.seasons$team2.score.leg
# Matchups as dataframe
matchups <- sim.seasons %>% select(matchup,team1.matchup.points,team1.matchup.gd)
# Create table for each simulated season
sim.tables <- sim.seasons %>% group_by(team1,sim.number) %>% summarize(points = sum(team1.matchup.points)) %>% arrange(desc(points)) %>% arrange(sim.number)
# Create first and second tiebreakers
sim.tables$tie.team <- c(rep(NA, 1), as.character(sim.tables$team1))[1 : length(sim.tables$team1)]
sim.tables$tie.points <- c(rep(NA, 1), sim.tables$points)[1 : length(sim.tables$points)]
sim.tables$matchup <- paste0(sim.tables$team1,sim.tables$tie.team,sim.tables$sim.number)
sim.tables <- sim.tables %>% left_join(matchups, by = "matchup")
sim.tables$tiebreak1 <- ifelse(sim.tables$points == sim.tables$tie.points, sim.tables$team1.matchup.points, 2)
sim.tables$tiebreak2 <- ifelse(sim.tables$points == sim.tables$tie.points, sim.tables$team1.matchup.gd, 0)
sim.tables$team <- sim.tables$team1
sim.tables <- sim.tables %>% ungroup() %>% select(team,sim.number, points, tiebreak1, tiebreak2)
# Add third tiebreaker (goal differential) and sort
gd <- predict_expg(model, team1=schedule$home, team2=schedule$away, return_df = TRUE)
gd$t1gd <- gd$expg1-gd$expg2
gd$t2gd <- gd$expg2-gd$expg1
results$home.gd <- results$home.score-results$away.score
results$away.gd <- results$away.score-results$home.score
lg.gd <- as_tibble_col(c(as.character(results$home),as.character(results$away),as.character(gd$team1), as.character(gd$team2)),column_name = "team")
lg.gd$gd <- c(as.numeric(results$home.gd),as.numeric(results$away.gd),as.numeric(gd$t1gd), as.numeric(gd$t2gd))
lg.gd <- lg.gd %>% group_by(team) %>% summarize(gd = sum(gd))
sim.tables <- sim.tables %>% left_join(lg.gd, by = "team")
sim.tables <- sim.tables %>% arrange(desc(gd)) %>% arrange(desc(tiebreak2)) %>% arrange(desc(tiebreak1)) %>% arrange(desc(points)) %>% arrange(sim.number)
# Add rank
sim.tables$rank <- rep(1:teams, times = (nrow(sim.tables)/teams))
fase.2 <- sim.tables %>% filter(rank <= 3) %>% select(team, sim.number,points)
playoff <- sim.tables %>% filter(rank == 4) %>% select(team, sim.number,points)
# Add to other leagues
aa.fase.2 <- rbind(aa.fase.2, fase.2)
aa.playoff <- rbind(aa.playoff, playoff)
}
# Remove NA rows
aa.fase.2 <- aa.fase.2[2:nrow(aa.fase.2),]
aa.playoff <- aa.playoff[2:nrow(aa.playoff),]
print(paste0("UESA a Segona Fase: ",nrow(aa.fase.2 %>% filter(team == "/Sant-Andreu"))/100,"%"))
print("Segona Fase")
print("Scraping and modelling...")
####### Segona Fase
# Scrape all Tercera
webpage <- read_html(paste0("https://www.resultados-futbol.com/tercera2021/grupo5/calendario"))
local_data <- html_nodes(webpage,'.equipo1') %>%  html_nodes("a") %>% html_attr("href")
vist_data <- html_nodes(webpage,'.equipo2') %>%  html_nodes("a") %>% html_attr("href")
result_data <- html_nodes(webpage,'.rstd') %>% html_text()
dates_data <- html_nodes(webpage,'.fecha') %>% html_text()
# Create dataset of all games
games <- data.frame(home = local_data, away = vist_data, score = result_data, date = dates_data)
games$score <- str_sub(games$score, -11, -7)
# Recode dates
games <- games %>% separate(date, c("day", "month", "year"), extra = "drop")
games$year <- as.numeric(games$year) + 2000
month <- c("Ago", "Sep", "Oct", "Nov", "Dic", "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul")
month.num <- c(8,9,10,11,12,1,2,3,4,5,6,7)
month.recode <- cbind.data.frame(month,month.num)
games <- games %>% left_join(month.recode, by = "month")
games$date <- as.Date(with(games, paste(year, month.num, day,sep="-")), "%Y-%m-%d")
games <- games %>% select(-day, -month, -year, -month.num)
results <- filter(games, grepl("-", games$score))
results <- filter(results, !grepl("x", results$score))
results <- filter(results, !grepl("'", results$score))
results <- results %>% separate(score, c("home.score", "away.score"), extra = "drop")
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Add in historic results
clublist <- as.character(unique(aa.fase.2$team))
history <- read_csv("gameshistory.csv", col_types = cols()) %>% select(-season,-league, -jornada)
history <- history %>% filter(home %in% clublist & away %in% clublist)
histresults <- rbind(history,results)
# Model
weights <- weights_dc(histresults$date, xi=xi.set)
model <- goalmodel(goals1 = histresults$home.score, goals2 = histresults$away.score,
team1 = histresults$home, team2=histresults$away, weights = weights, rs=TRUE)
# Simulate
print("Simulating...")
fase.2.sims <- NA
fase.2.nsim <- 100
for (i in 1:fase.2.nsim){
fase.1 <- aa.fase.2 %>% filter(sim.number == i)
fase.2.clubs <- as.character(unique(fase.1$team))
# Dummy Schedule
fase.2.sked <- data.frame(rep(fase.2.clubs, each = 6), rep(fase.2.clubs, times = 6))
names(fase.2.sked) <- c("home","away")
fase.2.sked <- fase.2.sked %>% filter(home != away)
predictions <- predict_result(model, team1=fase.2.sked$home, team2=fase.2.sked$away, return_df = TRUE)
predictions$random <- runif((nrow(predictions)),0,1)
predictions <- mutate(predictions, team1.points = ifelse(random < p1, 3,
ifelse(random > (1-p2), 0, 1)))
predictions <- mutate(predictions, team2.points = ifelse(team1.points == 0, 3,
ifelse(team1.points == 3, 0, 1)))
pred.home <- predictions %>% select(team1,team1.points)
names(pred.home) <- c("team","points")
pred.away <- predictions %>% select(team2,team2.points)
names(pred.away) <- c("team","points")
pred.all <- rbind(pred.home,pred.away)
pred.total <- pred.all %>% group_by(team) %>% summarize(fase.2.points = sum(points))
fase.2.results <- fase.1 %>% left_join(pred.total, by = "team")
fase.2.results$final.points <- fase.2.results$points + fase.2.results$fase.2.points
fase.2.results$tiebreak <- runif((nrow(fase.2.results)),0,1)
fase.2.results <- fase.2.results %>% arrange(tiebreak) %>% arrange(desc(final.points))
fase.2.results$rank <- 1:6
fase.2.sims <- rbind(fase.2.sims, fase.2.results)
}
fase.2.sims <- fase.2.sims[2:nrow(fase.2.sims),]
print("Likelihood of Direct Ascension from Segona Fase:")
print(fase.2.sims %>% filter(rank <= 2) %>% group_by(team) %>% count() %>% mutate(n = n/fase.2.nsim*100) %>% arrange(desc(n)))
###### Playoffs
print("Playoffs")
playoff.ascend <- NA
for (j in 1:fase.2.nsim){
playoff.sim <- fase.2.sims %>% filter(sim.number == j & rank > 2) %>% select(team,sim.number,points)
playoff.sim2 <- aa.playoff %>% filter(sim.number == j)
playoff.sim <- rbind(playoff.sim,playoff.sim2)
seed.1 <- as.character(playoff.sim[1,1])
seed.2 <- as.character(playoff.sim[2,1])
seed.3 <- as.character(playoff.sim[3,1])
seed.4 <- as.character(playoff.sim[4,1])
seed.5 <- as.character(playoff.sim[5,1])
seed.6 <- as.character(playoff.sim[6,1])
# Round 1
g1 <- data.frame(seed.3,seed.6)
names(g1) <- c("home","away")
g2 <- data.frame(seed.4,seed.5)
names(g2) <- c("home","away")
r1 <- rbind(g1,g2)
r1 <- predict_result(model, team1=r1$home, team2=r1$away, return_df = TRUE)
r1$random <- runif((nrow(r1)),0,1)
r1$p1 <- r1$p1 + (r1$pd/2)
r1$p2 <- r1$p2 + (r1$pd/2)
r1 <- mutate(r1, winner = ifelse(random < p1, team1, team2))
# Round 2
g1 <- data.frame(seed.1,as.character(r1[1,7]))
names(g1) <- c("home","away")
g2 <- data.frame(seed.2,as.character(r1[2,7]))
names(g2) <- c("home","away")
r2 <- rbind(g1,g2)
r2 <- predict_result(model, team1=r2$home, team2=r2$away, return_df = TRUE)
r2$random <- runif((nrow(r2)),0,1)
r2$p1 <- r2$p1 + (r2$pd/2)
r2$p2 <- r2$p2 + (r2$pd/2)
r2 <- mutate(r2, winner = ifelse(random < p1, team1, team2))
r2 <- r2 %>% arrange(random)
# Final
final <- data.frame(as.character(r1[1,7]),as.character(r1[2,7]))
names(final) <- c("home","away")
final <- predict_result(model, team1=final$home, team2=final$away, return_df = TRUE)
final$random <- runif((nrow(final)),0,1)
final$p1 <- final$p1 + (final$pd/2)
final$p2 <- final$p2 + (final$pd/2)
final <- mutate(final, winner = ifelse(random < p1, team1, team2))
playoff.ascend <- rbind(playoff.ascend,final[1,7])
}
playoff.ascend
playoff.ascend <- data.frame(playoff.ascend)
playoff.ascend
playoff.ascend <- playoff.ascend[2:nrow(playoff.ascend),]
names(playoff.ascend)
names(playoff.ascend) <- "team"
names(playoff.ascend)
playoff.ascend <- data.frame(playoff.ascend)
names(playoff.ascend)
names(playoff.ascend) <- "team"
names(playoff.ascend)
playoff.ascend
print(playoff.ascend %>% group_by(team) %>% count() %>% mutate(n = n/fase.2.nsim*100) %>% arrange(desc(n)))
playoff.odds <- playoff.ascend %>% group_by(team) %>% count() %>% mutate(n = n/fase.2.nsim*100) %>% arrange(desc(n))
print(playoff.odds)
fase.2.odds <- fase.2.sims %>% filter(rank <= 2) %>% group_by(team) %>% count() %>% mutate(n = n/fase.2.nsim*100) %>% arrange(desc(n))
print(fase.2.odds)
View(fase.2.sims)
total.odds <- rbind(fase.2.odds,playoff.odds)
total.odds
total.odds <- total.odds %>% group_by(team) %>% summarise(n = sum(n))
total.odds
total.odds <- total.odds %>% group_by(team) %>% summarise(n = sum(n)) %>% arrange(desc(n))
total.odds
sum(total.odds$n)
uesa <- total.odds %>% filter(team == "/Sant-Andreu")
uesa
uesa[1,2]
print(paste0("UESA Odds of Ascension: ",uesa[1,2],"%"))
print("**********")
print(paste0("UESA Odds of Ascension: ",uesa[1,2],"%"))
print("**********")
source("~/Google Drive/Futbol/tercerafullsim.R")
source("~/Google Drive/Futbol/tercerafullsim.R")
print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
print(paste0("UESA Odds of Ascension: ",uesa[1,2],"%"))
print("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<")
print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
print(paste0("UESA Odds of Ascension: ",uesa[1,2],"%"))
print("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<")
source("~/Google Drive/Futbol/tercerafullsim.R")
source("~/Google Drive/Futbol/tercerafullsim.R")
View(total.odds)
sum(total.odds$n)
library(tidyverse)
library(sf)
# Load background track data
bgtracks <- readRDS("~/research/data/exp_pro/user_locations_small_cell.rds")
View(bgtracks)
summary(bgtracks)
table(bgtracks$year,bgtracks$biweek)
table(bgtracks$biweek)
library(arrow)
library(tidyverse)
library(tidyverse)
library(arrow)
raw <- read_parquet("~/research/chunk_5.parquet")
head(raw)
View(raw)
raw[720042,]
raw[720042,5]
raw[720042,5][1]
test <- raw[720042,5]
View(test)
summary(raw$coordinates.coordinates)
class(raw$user.location)
class(raw$coordinates.coordinates)
raw[720042,5]
class(raw[720042,5])
unchop(raw, coordinates.coordinates)
View(raw)
test <- raw %>% filter(coordinates.coordinates != "<NULL>")
test <- unchop(raw, coordinates.coordinates)
View(test)
test <- unnest(raw, coordinates.coordinates)
test <- unnest_wider(raw, coordinates.coordinates)
head(test)
names(test)
test2 <- raw %>% filter(map_lgl(coordinates.coordinates, ~ !is.null(.)))
test <- suppressMessages(unnest_wider(test2, coordinates.coordinates))
head(test)
View(test)
names(raw)
raw <- read_parquet("~/research/chunk_5.parquet") %>%
select(created_at, user.id, coordinates.coordinates) %>%
filter(map_lgl(coordinates.coordinates, ~ !is.null(.)))
raw <- suppressMessages(unnest_wider(raw, coordinates.coordinates))
names(raw) <- c("timestamp","user","lon","lat")
raw
i<-5
csv_name <- paste0("chunk_pro_",i)
csv_name <- paste0("chunk_pro_",i,".csv")
csv_name <- paste0("chunk_",i,"_pro.csv")
file <- paste0("/Volumes/data/data_run2/chunk_",i,".parquet")
file
raw <- read_parquet(file)
print(Sys.time())
library(tidyverse)
library(arrow)
i<-5
print(Sys.time())
file <- paste0("/Volumes/data/data_run2/chunk_",i,".parquet")
raw <- read_parquet(file) %>%
select(created_at, user.id, coordinates.coordinates) %>%
filter(map_lgl(coordinates.coordinates, ~ !is.null(.)))
raw <- suppressMessages(unnest_wider(raw, coordinates.coordinates))
names(raw) <- c("timestamp","user","lon","lat")
csv_name <- paste0("/Volumes/data/processed_tweeets/chunk_",i,"_pro.csv")
print(Sys.time())
#'Spain', (-9.39288367353 (lon), 35.946850084 (lat), 3.03948408368 (lon), 43.7483377142 (lat))
write_csv(raw, csv_name)
raw2 <- raw %>%
filter(lon > -9.39288367353 & lon < 3.03948408368) %>%
filter(lat > 35.946850084 & lat < 43.7483377142)
raw <- raw %>%
filter(lon > -9.39288367353 & lon < 3.03948408368) %>%
filter(lat > 35.946850084 & lat < 43.7483377142)
spain_name <- paste0("~research/spain_tweeets/spain_",i,"_pro.csv")
write_csv(raw, spain_name)
spain_name <- paste0("~/research/spain_tweeets/spain_",i,".csv")
write_csv(raw, spain_name)
spain_name <- paste0("~/research/spain_tweets/spain_",i,".csv")
write_csv(raw, spain_name)
list.files("/Volumes/data/data_run2")
# KBO Fancy Stats
source("~/Google Drive/KBO/2020elo.R")
library(tidyverse)
d <- read_csv("~/research/data/data/exp_raw/tigaserver_app_fix.csv")
View(d)
tail(d)
summary(phone_upload_time)
summary(D$phone_upload_time)
summary(d$phone_upload_time)
