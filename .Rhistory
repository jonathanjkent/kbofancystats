## I'm not sure if all of those are needed but just install any of those you don't alrady have
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "US") %>% ungroup()
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Add today
#iran <- rbind(iran, c("Iran", "2020-03-10", 8042))
#iran$cases <- as.numeric(iran$cases)
#iran$date <- as.Date(iran$date)
# Create a variable that sets the first day as day 0 and then counts up
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-19"), units = "days")))
# Linear regression of the log of cases to find the growth rate
model <- lm(log(cases)~days, data=iran)
# Use that rate to predict the future
# If you want to do more than 5 days ahead, change the two 5s below but
# hopefully the rate will keep going down and this assumes it won't
future <- tibble(cases=last(iran$cases)*exp(model$coef[2]*1:30), date=last(iran$date) + 1:30, type="projected")
# Combine the actual cases with the projected ones
iran$type <- "actual"
iran <- iran %>% select(-country, -days)
iran <- rbind(iran, future)
# Make an graph (to easily save as an image)
ggplot(iran,aes(date, cases, color = type)) + geom_line()
# Make an interactive one
plot <- ggplot(iran,aes(date, cases, color = type)) + geom_line()
ggplotly(plot)
View(future)
1+2
1+2 =4
library(tidyverse)
data <- read_csv("~research/data/exp_raw/tigaserver_app_fix.csv")
data <- read_csv("~/research/data/exp_raw/tigaserver_app_fix.csv")
View(data)
summary(data)
library(ggmap)
register_google(key = "AIzaSyC8Mmv45YuMzDqM5_BML_35-j5HaSeTyZ4")
spain <-  get_googlemap(center = "Spain", zoom = 6)
spain <-  get_googlemap("Spain", zoom = 6)
spain <-  get_map("Spain", zoom = 6)
?get_googlemap
spain <-  get_map("Madric, Spain", zoom = 6)
g
get_googlemap("waco, texas", maptype = "satellite") %>% ggmap()
register_google(key = "AIzaSyC8Mmv45YuMzDqM5_BML_35-j5HaSeTyZ4")
register_google(key = "AIzaSyAwysDpKGsfTWgDMMDh071KiC-cYPWrXEY")
spain <-  get_map("Madric, Spain", zoom = 6)
ggmap(spain)
ggmap(spain) + geom_point(aes(x = masked_lon, y = masked_lat), data = data)
library(ggplot2)
bcn <-  get_map("Barcelona, Spain", zoom = 12)
ggmap(bcn) + geom_point(aes(x = masked_lon, y = masked_lat), data = data)
data$grid.sq <- paste0(data$masked_lon,"x",data$masked_lat)
by.sq <- data %>% group_by(grid.sq) %>% count()
View(by.sq)
by.sq <- data %>% group_by(grid.sq) %>% count() %>% arrange(n)
View(by.sq)
by.sq <- data %>% group_by(grid.sq) %>% count() %>% arrange(desc(n)
by.sq[1,2]
by.sq[2,1]
by.sq[5,1]
topten <- by.sq[1:10,1]
toptenlocs <- data %>% filter(grid.sq %in% topten)
toptenlocs <- data %>% filter(grid.sq %in% as.list(topten))
topten <- as.list(by.sq[1:10,1])
topten <- as.vector(by.sq[1:10,1])
topten <- as.character(by.sq[1:10,1])
toptenlocs <- data %>% filter(grid.sq %in% topten)
topten
topten <- as.vector(by.sq[1:10,1])
topten
toptenlocs <- data %>% filter(grid.sq %in% topten$grid.sq)
View(toptenlocs)
toptenlocs <- data %>% filter(grid.sq %in% c("-0.025x39.925", "-0.025x39.95 "))
by.sq <- data %>% group_by(grid.sq) %>% count() %>% arrange(desc(n))
by.sq
topten <- by.sq[1:10,1]
toptenlocs <- data %>% filter(grid.sq %in% topten$grid.sq)
ggmap(spain) + geom_point(aes(x = masked_lon, y = masked_lat), data = toptenlocs)
spain <-  get_map("Madrid, Spain", zoom = 4)
ggmap(spain) + geom_point(aes(x = masked_lon, y = masked_lat), data = toptenlocs)
View(topten)
spain <-  get_map("Madrid, Spain", zoom = 6)
topten <- by.sq[1:100,1]
toptenlocs <- data %>% filter(grid.sq %in% topten$grid.sq)
ggmap(spain) + geom_point(aes(x = masked_lon, y = masked_lat), data = toptenlocs)
spain <-  get_map("Zaragoza, Spain", zoom = 6)
ggmap(spain) + geom_point(aes(x = masked_lon, y = masked_lat), data = toptenlocs)
spain <-  get_map("Valencia, Spain", zoom = 6)
ggmap(spain) + geom_point(aes(x = masked_lon, y = masked_lat), data = toptenlocs)
View(by.sq)
test.sq <- data %>% filter(grid.sq == "2.05x41.55")
ggmap(spain) + geom_point(aes(x = masked_lon, y = masked_lat), data = test.sq)
ggmap(bcn) + geom_point(aes(x = masked_lon, y = masked_lat), data = test.sq)
bcn <-  get_map("Barcelona, Spain", zoom = 12)
ggmap(bcn) + geom_point(aes(x = masked_lon, y = masked_lat), data = test.sq)
bcn <-  get_map("Barcelona, Spain", zoom = 10)
ggmap(bcn) + geom_point(aes(x = masked_lon, y = masked_lat), data = test.sq)
sabadell <-  get_map("Sabadell, Spain", zoom = 13)
ggmap(sabadell) + geom_point(aes(x = masked_lon, y = masked_lat), data = test.sq)
sabadell <-  get_map("Sabadell, Spain", zoom = 12)
ggmap(sabadell) + geom_point(aes(x = masked_lon, y = masked_lat), data = test.sq)
ggmap(sabadell) + geom_point(aes(x = masked_lon, y = masked_lat), data = test.sq)
sabadell <-  get_map("Torrebonica, Spain", zoom = 13)
ggmap(sabadell) + geom_point(aes(x = masked_lon, y = masked_lat), data = test.sq)
View(test.sq)
test.sq$fake_lon <- test.sq$masked_lon - runif(1, 0, .025)
test.sq$fake_lat <- test.sq$masked_lat - runif(1, 0, .025)
ggmap(sabadell) + geom_point(aes(x = fake_lon, y = fake_lat), data = test.sq)
test.sq$fake_lat <- test.sq$masked_lat + runif(1, 0, .025)
ggmap(sabadell) + geom_point(aes(x = fake_lon, y = fake_lat), data = test.sq)
test.sq$fake_lon <- test.sq$masked_lon - runif(nrow(test.sq), 0, .025)
test.sq$fake_lat <- test.sq$masked_lat + runif(nrow(test.sq), 0, .025)
ggmap(sabadell) + geom_point(aes(x = fake_lon, y = fake_lat), data = test.sq)
ggmap(sabadell) + geom_point(aes(x = fake_lon, y = fake_lat), data = test.sq,alpha = 0.05)
ggmap(sabadell) + geom_point(aes(x = fake_lon, y = fake_lat), data = test.sq, alpha = 0.2)
ggmap(sabadell) + geom_point(aes(x = fake_lon, y = fake_lat), data = test.sq, alpha = 0.1)
data$fake_lon <- data$masked_lon - runif(nrow(data), 0, .025)
data$fake_lat <- data$masked_lat + runif(nrow(data), 0, .025)
ggmap(bcn) + geom_point(aes(x = fake_lon, y = fake_lat), data = data, alpha = 0.1)
bcn <-  get_map("Barcelona, Spain", zoom = 15)
ggmap(bcn) + geom_point(aes(x = fake_lon, y = fake_lat), data = data, alpha = 0.1)
ggmap(bcn) + geom_point(aes(x = fake_lon, y = fake_lat), data = data, alpha = 0.2)
bcn <-  get_map("Barcelona, Spain", zoom = 14)
ggmap(bcn) + geom_point(aes(x = fake_lon, y = fake_lat), data = data, alpha = 0.4)
bcn <-  get_map("Barcelona, Spain", zoom = 13)
ggmap(bcn) + geom_point(aes(x = fake_lon, y = fake_lat), data = data, alpha = 0.4)
ggmap(bcn) + geom_point(aes(x = fake_lon, y = fake_lat), data = data, alpha = 0.2)
madrid <-  get_map("Madrid, Spain", zoom = 13)
ggmap(madrid) + geom_point(aes(x = fake_lon, y = fake_lat), data = data, alpha = 0.2)
madrid <-  get_map("Madrid, Spain", zoom = 11)
ggmap(madrid) + geom_point(aes(x = fake_lon, y = fake_lat), data = data, alpha = 0.2)
ggmap(madrid) + geom_point(aes(x = fake_lon, y = fake_lat), data = data, alpha = 0.2)
View(data)
library(blogdown)
library(rmarkdown)
library(tidyverse)
library(rvest)
library(elo)
library(scales)
setwd("~/Google Drive/KBO")
## Scrape 2020 Schedule and Results
links <- read_csv("mykboweeks.csv")
links <- links$url
all.results <- NA
all.schedule <- NA
url <- links[1]
week <-  substring(url, first = 38)
d <- read_html(url) %>% html_table() %>% as.data.frame() %>% select(-X2, -X4)
View(d)
d <- d[2:(nrow(d)-1),]
d <- d %>% filter(str_detect(X1, "2020") == F)
d <- d %>% separate(X1, c("away1", "away2"))
d <- d %>% separate(X5, c("home1", "home2"))
d <- d %>% separate(X3, c("A.Score", "H.Score"))
d$Away <- paste(d$away1, d$away2)
d$Home <- paste(d$home1, d$home2)
d$week <- as.Date(week)
d$Year <- 2020
d$addday <- rep(0:5, each = 5)
d$Date <- as.Date(d$week + d$addday)
results <- d %>% filter(str_detect(H.Score, "0am") == F) %>% select(Date, Home, Away, H.Score, A.Score, Year)
View(results)
results <- d %>% filter(str_detect(H.Score, "0am") == F & str_detect(A.Score, "Cancelled" == F)) %>% select(Date, Home, Away, H.Score, A.Score, Year)
results <- d %>% filter(str_detect(H.Score, "0am") == F & str_detect(A.Score, "Cancelled") == F) %>% select(Date, Home, Away, H.Score, A.Score, Year)
results <- d %>% filter(!str_detect(H.Score, "0am") & !str_detect(A.Score, "Cancelled")) %>% select(Date, Home, Away, H.Score, A.Score, Year)
results <- d %>% filter(!str_detect(H.Score, "0am") & !str_detect(A.Score, "Canceled")) %>% select(Date, Home, Away, H.Score, A.Score, Year)
schedule <- d %>% filter(str_detect(H.Score, "0am") | str_detect(A.Score, "Canceled")) %>% select(Home, Away, Date, Year)
View(schedule)
library(tidyverse)
library(rvest)
library(blogdown)
library(rmarkdown)
setwd("~/Google Drive/KBO")
## Blank Data Sets
pitchers <- NA
batters <- NA
## Scrape Daily Box Scores for Active Players
all.links <- NA
for (i in 7686:7690){
print(i)
url <- paste0("https://mykbostats.com/games/",i)
links <- read_html(url) %>% html_nodes("table") %>% html_nodes("a") %>% html_attr("href")
links <- links[str_detect(links, "players")]
all.links <- append(all.links, links)
}
all.links <- all.links[2:length(all.links)]
all.links <- unique(all.links)
## Scrape Players' 2020 Stats
for (i in 1:length(all.links)){
print(i/length(all.links))
url <- paste0("https://mykbostats.com",all.links[i])
site <- read_html(url)
player <- site %>% html_table(fill = T)
player <- as.data.frame(player[1])
player <- player[1,]
player$Code <- gsub("\\D", "", url)
## Add Name, Position, Etc.
d <- site %>%
html_node("h1") %>% html_text()
d <- gsub("[\r\n]", "", d)
d <- strsplit(d, "[|()#]")
player$Name <- substring(d[[1]][1], first = 1, last = (nchar(d[[1]][1]))-1)
player$Position <- substring(d[[1]][5], first = 2)
player$Number <- substring(d[[1]][4], first = 1, last = (nchar(d[[1]][4]))-1)
player$KName <- d[[1]][2]
## Add To Batter or Pitcher Data
if (length(player) == 33) {
pitchers <- rbind(pitchers, player)
} else {
batters <- rbind(batters, player)
}
}
pitchers <- pitchers[2:nrow(pitchers),]
names(pitchers)[8] <- "Hold"
names(pitchers)[19] <- "H"
batters <- batters[2:nrow(batters),]
batters <- batters %>% filter(Year == 2020)
pitchers <- pitchers %>% filter(Year == 2020)
batters$Code <- (as.numeric(batters$Code) * 7) + 5
pitchers$Code <- (as.numeric(pitchers$Code) * 7) + 5
### Fix Teams
batters$Team <- as.factor(batters$Team)
batters$Team <- recode(batters$Team,
"Doosan" = "Doosan Bears",
"Hanwha" = "Hanwha Eagles",
"Kia" = "Kia Tigers",
"Kiwoom" = "Kiwoom Heroes",
"KT" = "KT Wiz",
"LG" = "LG Twins",
"Lotte" = "Lotte Giants",
"NC" = "NC Dinos",
"Nexen" = "Kiwoom Heroes",
"Samsung" = "Samsung Lions",
"SK" = "SK Wyverns")
pitchers$Team <- as.factor(pitchers$Team)
pitchers$Team <- recode(pitchers$Team,
"Doosan" = "Doosan Bears",
"Hanwha" = "Hanwha Eagles",
"Kia" = "Kia Tigers",
"Kiwoom" = "Kiwoom Heroes",
"KT" = "KT Wiz",
"LG" = "LG Twins",
"Lotte" = "Lotte Giants",
"NC" = "NC Dinos",
"Nexen" = "Kiwoom Heroes",
"Samsung" = "Samsung Lions",
"SK" = "SK Wyverns")
#### Do the Fancy Stats
## Add Park Factors
pf <- read_csv("parkfactors.csv")
batters <- batters %>% left_join(pf, by = "Team")
pitchers <- pitchers %>% left_join(pf, by = "Team")
## Guts
guts <- read_csv("guts.csv")
guts <- guts %>% subset(Season > 1998)
wBB <- mean(guts$wBB)
wHBP <- mean(guts$wHBP)
w1B <- mean(guts$w1B)
w2B <- mean(guts$w2B)
w3B <- mean(guts$w3B)
wHR <- mean(guts$wHR)
runSB <- mean(guts$runSB)
runCS <- mean(guts$runCS)
## Fix Basics
batters$X1B <- batters$H-batters$X2B-batters$X3B-batters$HR
pitchers$IP2 <- pitchers$IP
pitchers <- pitchers %>% separate(IP, c("a", "b"))
pitchers$b <-  substring(pitchers$b, first = 5, last = 5)
pitchers$b[is.na(pitchers$b)] <- 0
pitchers$IP <- as.numeric(pitchers$a) + as.numeric(pitchers$b)*(1/3)
pitchers$IP2 <- paste0(pitchers$a,".",pitchers$b)
pitchers <- pitchers %>% select(-a, -b)
# Batter background
lgAB = sum(batters$AB, na.rm=TRUE)
lgPA = sum(batters$PA, na.rm=TRUE)
lgSF = sum(batters$SF, na.rm=TRUE)
lgBB = sum(batters$BB, na.rm=TRUE)
lgIBB = sum(batters$IBB, na.rm=TRUE)
lgHBP = sum(batters$HBP, na.rm=TRUE)
lgH = sum(batters$H, na.rm=TRUE)
lg1B = sum(batters$X1B, na.rm=TRUE)
lg2B = sum(batters$X2B, na.rm=TRUE)
lg3B = sum(batters$X3B, na.rm=TRUE)
lgHR = sum(batters$HR, na.rm=TRUE)
lgSB = sum(batters$SB, na.rm=TRUE)
lgCS = sum(batters$CS, na.rm=TRUE)
lgR = sum(batters$R, na.rm=TRUE)
lgRPA <- lgR/lgPA
lgwOBA <- (wBB*(lgBB-lgIBB) + wHBP*lgHBP + w1B*lg1B + w2B*lg2B + w3B*lg3B + wHR*lgHR)/(lgPA)
wOBAscale <- lgwOBA/.250
lgOBP <- (lgH + lgBB - lgIBB + lgHBP)/(lgPA)
lgwSB <- (lgSB * runSB + lgCS * runCS) / (lg1B + lgBB + lgHBP - lgIBB)
lgwRC <- (lgwOBA/wOBAscale+lgRPA)*lgPA
## Pitcher background
lgIPp <- sum(pitchers$IP, na.rm=TRUE)
lgRp <- sum(pitchers$R, na.rm=TRUE)
lgERp <- sum(pitchers$ER, na.rm=TRUE)
lgSOp <- sum(pitchers$SO, na.rm=TRUE)
lgRp <- sum(pitchers$R, na.rm=TRUE)
lgHRp <- sum(pitchers$HR, na.rm=TRUE)
lgBBp <- sum(pitchers$BB, na.rm=TRUE)
lgHBPp <- sum(pitchers$HB, na.rm=TRUE)
lgGSp <- sum(pitchers$GS, na.rm=TRUE)
lgGSp <- lgGSp/2
RPW <- 9*(lgRp/lgIPp)*1.5 + 3
lgRA9 <- (lgRp/lgIPp)*9
lgERA <- (lgERp/lgIPp)*9
FIPcon <- lgERA - (((13*lgHRp)+(3*(lgBBp+lgHBPp))-(2*lgSOp))/lgIPp)
lgFIPR9 <- lgERA + (lgRA9 - lgERA)
## Batter Stats
batters$wOBA <- (wBB*(batters$BB-batters$IBB) + wHBP*batters$HBP + w1B*batters$X1B + w2B*batters$X2B + w3B*batters$X3B + wHR*batters$HR)/(batters$PA)
batters$wRAA <- ((batters$wOBA-lgwOBA)/wOBAscale)*batters$PA
batters$WAR <- ((batters$wRAA + (lgRPA - (batters$PF*(lgRPA)))*batters$PA) + (batters$SB*runSB + batters$CS*runCS - lgwSB * (batters$X1B + batters$BB + batters$HBP - batters$IBB)) + (((lgGSp*.2345)*((lgGSp)/lgGSp))*(RPW/lgPA) * batters$PA))/RPW
batters$wRC <- (((batters$wOBA-lgwOBA)/wOBAscale)+(lgRPA))*batters$PA
batters$wRCplus <- (((batters$wRAA/batters$PA + lgRPA) + (lgRPA - batters$PF*lgRPA))/(lgRPA))*100
batters$BBpct <- (batters$BB/batters$PA)*100
batters$SOpct <- (batters$SO/batters$PA)*100
batters$OBP <- (batters$H + batters$BB + batters$HBP)/(batters$PA)
batters$SLG <- (batters$X1B + (2*batters$X2B) + (3*batters$X3B) + (4*batters$HR))/batters$AB
batters$OPS <- batters$OBP + batters$SLG
batters$BA <- batters$H/batters$AB
batters$ISO <- batters$SLG-batters$BA
batters$BABIP <- (batters$H - batters$HR)/(batters$AB - batters$SO - batters$HR + batters$SF)
## Pitcher Stats
pitchers$FIP <- ((13*pitchers$HR)+(3*(pitchers$BB+pitchers$HB))-(2*pitchers$SO))/pitchers$IP + FIPcon
pitchers$FIPR9 <- pitchers$FIP + (lgRA9 - lgERA)
pitchers$pFIPR9 <- pitchers$FIPR9/pitchers$PF
pitchers$dRPW <- (((((18 - pitchers$IP/pitchers$G)*(lgFIPR9)) + ((pitchers$IP/pitchers$G)*pitchers$pFIPR9)) / 18) + 2)*1.5
pitchers$RAAP9 <- lgFIPR9 - pitchers$pFIPR9
pitchers$WPGAA <- pitchers$RAAP9 / pitchers$dRPW
pitchers$RepLev <- 0.03*(1 - pitchers$GS/pitchers$G) + 0.12*(pitchers$GS/pitchers$G)
pitchers$WPGAR <- pitchers$WPGAA + pitchers$RepLev
pitchers$WAR <- pitchers$WPGAR * (pitchers$IP/9)
pitchers$BABIP <- (pitchers$H - pitchers$HR)/(pitchers$TBF - pitchers$BB - pitchers$IBB - pitchers$HB - pitchers$SO - pitchers$HR)
pitchers$SO9 <- pitchers$SO/pitchers$IP*9
pitchers$BB9 <- pitchers$BB/pitchers$IP*9
pitchers$HR9 <- pitchers$HR/pitchers$IP*9
## Lists for pages
listbat <- batters %>% select(Name, Code, KName, Team, Position)
listpit <- pitchers %>% select(Name, Code, KName, Team, Position)
batnoupdate <- read_csv("batters_full_20.csv")
pitnoupdate <- read_csv("pitchers_full_20.csv")
batcodes <- batters$Code
batnoupdate <- batnoupdate %>% filter(!Code %in% batcodes)
pitcodes <- pitchers$Code
pitnoupdate <- pitnoupdate %>% filter(!Code %in% pitcodes)
batters <- rbind(batters, batnoupdate)
pitchers <- rbind(pitchers, pitnoupdate)
View(batters)
View(batnoupdate)
batnoupdate <- batnoupdate %>% select(-batruns, -runruns, -replev, -totalruns)
batters <- rbind(batters, batnoupdate)
write_csv(batters, "batters_full_20.csv")
write_csv(pitchers, "pitchers_full_20.csv")
# Team Stats
teamsbat <- batters %>% select(Team, BB, IBB, HBP, X1B, X2B, X3B, HR, PA, R)
teamsbat <- aggregate(.~Team, teamsbat, sum)
teamsbat$wOBA <- (wBB*(teamsbat$BB-teamsbat$IBB) + wHBP*teamsbat$HBP + w1B*teamsbat$X1B + w2B*teamsbat$X2B + w3B*teamsbat$X3B + wHR*teamsbat$HR)/(teamsbat$PA)
teamspit <- pitchers %>% select(Team, ER, IP, HR, BB, HB, SO)
teamspit <- aggregate(.~Team, teamspit, sum)
tpER <- sum(teamspit$ER)
tpIP <- sum(teamspit$IP)
tpHR <- sum(teamspit$HR)
tpBB <- sum(teamspit$BB)
tpHBP <- sum(teamspit$HB)
tpSO <- sum(teamspit$SO)
tpERA <- (tpER/tpIP)*9
tFIPcon <- tpERA - (((13*tpHR)+(3*(tpBB+tpHBP))-(2*tpSO))/tpIP)
teamspit$FIP <- ((13*teamspit$HR)+(3*(teamspit$BB+teamspit$HB))-(2*teamspit$SO))/teamspit$IP + tFIPcon
teamstats <- teamsbat %>% left_join(teamspit, by = "Team") %>% select(Team, wOBA, FIP)
write_csv(teamstats, "teamstats.csv")
View(teamstats)
## Reduce
batters.20 <- batters %>% select(Year, Name, KName, Position, Team, G, PA, HR, OPS, BBpct, SOpct, ISO, BABIP, wRCplus, WAR, Code)
pitchers.20 <- pitchers %>% select(Year, Name, KName, Position, Team, G, GS, IP2, SO9, BB9, HR9, BABIP, ERA, FIP, WAR, Code)
View(batters.20)
View(pitchers.20)
## Combine With Pre-2020 Stats
batters.1019 <- read_csv("batters_simple_10to19.csv")
pitchers.1019 <- read_csv("pitchers_simple_10to19.csv")
batters.all <- rbind(batters.1019,batters.20)
pitchers.all <- rbind(pitchers.1019,pitchers.20)
batters.all <- unique(batters.all)
pitchers.all <- unique(pitchers.all)
## Save
write_csv(batters.all, "batters_simple.csv")
write_csv(pitchers.all, "pitchers_simple.csv")
setwd("~/Google Drive/KBO/kbofancystats")
serve_site()
## Write and Update Pages
setwd("~/Google Drive/KBO/kbofancystats/content/teams")
batters <- read_csv("~/Google Drive/KBO/batters_simple.csv")
pitchers <- read_csv("~/Google Drive/KBO/pitchers_simple.csv")
list <- batters %>% filter(Year == "2020") %>% select(Team)
list <- unique(list$Team)
batleaders <- batters %>% select(Name, Position, WAR, Year, Team)
pitleaders <- pitchers %>% select(Name, Position, WAR, Year, Team)
leaders <- rbind(batleaders, pitleaders)
tops <- leaders %>% filter(Year == "2020") %>% group_by(Team) %>% top_n(3, WAR)
tops <- tops[order(-tops$WAR),]
tops$WAR <- round(tops$WAR, 2)
current.elos <- read_csv("~/Google Drive/KBO/currentelos.csv")
current.elos$Elo <- round(current.elos$Elo, 0)
cities <- read_csv("~/Google Drive/KBO/teamcities.csv")
tops <- tops %>% left_join(cities, by = "Team")
for (i in list){
top <- tops %>% filter(Team == i)
top3 <- paste0("WAR Leader | ",top[1,1],", ",top[1,2],": ",top[1,3])
elo <- current.elos %>% filter(Team == i)
elo <- paste0(top[1,6]," | Current Elo: ",elo[1,2]," (",elo[1,3],")")
a <- "---"
b <- 'date: "2020-03-31"'
c <- paste0("summary: ","'", top3,"'")
d <- paste0("title: ","'", i,"'")
da <- paste0("subtitle: ","'", elo,"'")
db <- "image:"
dc <- "  preview_only: true"
ea <- "**2020** | [Batting](#batting) | [Pitching](#pitching) | "
eaa <- paste0("**2019** | [Batting](https://www.kbofancystats.com/2019-stats/", gsub("[[:space:]]", "", i),"/#batting) | [Pitching](https://www.kbofancystats.com/2019-stats/",gsub("[[:space:]]", "", i),"/#pitching) | ")
eb <- " "
e <- "### 2020 Batting Stats {#batting}"
f <- "```{r pressure, echo=F,warning=FALSE,message=FALSE}"
g <- "library(tidyverse)"
j <- "library(kableExtra)"
k <- 'batters <- read_csv("~/Google Drive/KBO/batters_simple.csv")'
l <- "batters <- batters[complete.cases(batters),]"
m <- "#batters$Age <- as.numeric(batters$Age)"
n <- paste0('d <- batters %>% filter(Team == "', i, '") %>% filter(Year == "2020") %>% select(-Team, -Year, -KName)')
o <- "d <- d[order(-d$WAR),]"
p <- 'd$Name <- paste0("[", d$Name, "](/players/", d$Code, ")")'
q <- 'kable(d, digits = c(0,0,0,0,0,3,1,1,3,3,1,2), col.names = c("Name","Pos","G","PA","HR","OPS","BB%","SO%","ISO","BABIP","wRC+","WAR")) %>% kable_styling(bootstrap_options = c("striped", "hover"), fixed_thead = T) %>%column_spec(1, bold = T, border_right = F)'
r <- "```"
rr <- "***"
s <- "### 2020 Pitching Stats {#pitching}"
t <- "```{r, echo=F,warning=FALSE,message=FALSE}"
u <- 'pitchers <- read_csv("~/Google Drive/KBO/pitchers_simple.csv")'
v <- 'pitchers <- pitchers[complete.cases(pitchers),]'
w <- paste0('d <- pitchers %>% filter(Team == "', i, '") %>% filter(Year == "2020") %>% select(-Team, -Year, -KName, -Position)')
x <- 'd <- d[order(-d$WAR),]'
y <- 'd$Name <- paste0("[", d$Name, "](/players/", d$Code, ")")'
ab <- "d <- d %>% select(-Code)"
z <- 'kable(d, digits = c(0,0,0,1,1,1,1,3,3,2,2), col.names = c("Name","G","GS","IP","K/9","BB/9","HR/9","BABIP","ERA","FIP","WAR")) %>% kable_styling(bootstrap_options = c("striped", "hover"), fixed_thead = T) %>% column_spec(1, bold = T, border_right = F)'
teamwd <- paste0("~/Google Drive/KBO/kbofancystats/content/teams/",gsub("[[:space:]]", "", i))
setwd(teamwd)
file <- "index.rmd"
writeLines(c(a,b,c,d,da,db,dc,a,ea,eaa,eb,rr,e,f,g,j,k,l,m,n,o,p,ab,q,r,rr,s,t,u,v,w,x,y,ab,z,r), file)
}
setwd("~/Google Drive/KBO/kbofancystats/content/players")
#list <- batters %>% select(Name, Code, KName, Team, Position)
list <- listbat
for (i in 1:nrow(list)){
title <- paste0(list$Name[i], " | ", list$KName[i])
subtitle <- paste0(list$Team[i], " | ", list$Position[i])
id <- list$Code[i]
a <- "---"
b <- paste0('title: ', title)
bb <- paste0('subtitle: ', subtitle)
bc <- 'summary: "Career Stats"'
c <- "```{r , echo=F,warning=FALSE,message=FALSE}"
f <- "library(kableExtra)"
g <- 'd <- read.csv("~/Google Drive/KBO/batters_simple.csv")'
j <- paste0('d <- subset(d, Code == "', id, '", select = c(-Name, -KName, -Position, -Code))')
k <- 'd <- d[order(-d$Year),]'
k2 <- 'd$Team <- paste0("[", d$Team, "](/teams/", gsub("[[:space:]]", "", d$Team), ")")'
l <- 'kable(d, digits = c(0,0,0,0,0,3,1,1,3,3,1,2), row.names = FALSE, col.names = c("Season","Team","G","PA","HR","OPS","BB%","SO%","ISO","BABIP","wRC+","WAR")) %>% kable_styling(bootstrap_options = c("striped", "hover"), fixed_thead = T)'
m <- "```"
file <- paste0(gsub("[[:space:]]", "", id), ".rmd")
writeLines(c(a,b,bb,bc,a,c,f,g,j,k,k2,l,m), file)
}
setwd("~/Google Drive/KBO/kbofancystats/content/players")
#list <- pitchers %>% select(Name, Code, KName, Team, Position)
list <- listpit
for (i in 1:nrow(list)){
title <- paste0(list$Name[i], " | ", list$KName[i])
subtitle <- paste0(list$Team[i], " | ", list$Position[i])
id <- list$Code[i]
a <- "---"
b <- paste0('title: ', title)
bb <- paste0('subtitle: ', subtitle)
bc <- 'summary: "Career Stats"'
c <- "```{r , echo=F,warning=FALSE,message=FALSE}"
f <- "library(kableExtra)"
g <- 'd <- read.csv("~/Google Drive/KBO/pitchers_simple.csv")'
j <- paste0('d <- subset(d, Code == "', id, '", select = c(-Name, -KName, -Position, -Code))')
jj <- 'd <- subset(d, Year > 2013)'
k <- 'd <- d[order(-d$Year),]'
k2 <- 'd$Team <- paste0("[", d$Team, "](/teams/", gsub("[[:space:]]", "", d$Team), ")")'
l <- 'kable(d, digits = c(0,0,0,0,1,1,1,1,3,2,2,2), row.names = FALSE, col.names = c("Season","Team","G","GS","IP","K/9","BB/9","HR/9","BABIP","ERA","FIP","WAR")) %>% kable_styling(bootstrap_options = c("striped", "hover"), fixed_thead = T)'
m <- "```"
file <- paste0(gsub("[[:space:]]", "", id), ".rmd")
writeLines(c(a,b,bb,bc,a,c,f,g,j,jj,k,k2,l,m), file)
}
# Refresh Pages
render("~/Google Drive/KBO/kbofancystats/content/leaders.Rmd")
render("~/Google Drive/KBO/kbofancystats/content/elo.Rmd")
setwd("~/Google Drive/KBO/kbofancystats")
serve_site()
library(tidyverse)
library(rvest)
library(blogdown)
library(rmarkdown)
setwd("~/Google Drive/KBO/kbofancystats")
serve_site()
stop_server()
