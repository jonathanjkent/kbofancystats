arrange(desc(Date)) %>%
slice(10) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
write_csv(current.elos, "currentelos.csv")
## Ten Team Era for History Page
tenteam <- elo.history %>% filter(Date > ISOdate(2013,1,1))
write_csv(tenteam,"elohistory.csv")
## Simulations
nsim <- 100000
all.schedule$Prediction <- predict(elo, newdata = all.schedule)
View(all.schedule)
View(current.elos)
View(elo.history)
home <- all.history %>% select(Date, Home, H.Elo)
away <- all.history %>% select(Date, Away, A.Elo)
cols <- c("Date", "Team", "Elo")
colnames(home) <- cols
colnames(away) <- cols
elo.history <- rbind(home,away)
View(elo.history)
elo.history$Elo <- round(elo.history$Elo, digits = 0)
View(elo.history)
## Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(10) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
View(current.elos)
## Current Elos
current.elos <- elo.history %>%
arrange(desc(Date)) %>%
slice(10) %>% select(-Date) %>%
arrange(desc(Elo))
View(current.elos)
View(current.elos)
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date))
View(current.elos)
urrent.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(10)
View(urrent.elos)
?slice
## Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1:10) %>% select(-Date) %>%
arrange(desc(Elo))
View(current.elos)
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date))
current.elos
current.elos %>% slice(10)
head(current.elos)
?slice
filter(between(row_number(), 1, 10) %>% select(-Date) %>%
## Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
filter(between(row_number(), 1, 10)) %>% select(-Date) %>%
arrange(desc(Elo))
n()
## Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1) %>% select(-Date) %>%
arrange(desc(Elo))
View(current.elos)
current.elos$Rank <- 1:10
write_csv(current.elos, "currentelos.csv")
## Ten Team Era for History Page
tenteam <- elo.history %>% filter(Date > ISOdate(2013,1,1))
write_csv(tenteam,"elohistory.csv")
## Simulations
nsim <- 100000
all.schedule$Prediction <- predict(elo, newdata = all.schedule)
all.schedule <- data.frame(all.schedule, Round = rep(1:nsim, each = nrow(all.schedule)))
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count()
standings <- standings %>% arrange(desc(n)) %>% arrange(Round)
standings$Rank <- rep(1:10, max(standings$Round))
pred.1 <- standings %>% filter(Rank == 1) %>% group_by(Winner) %>% count()
pred.1$Pct <- (pred.1$n/nsim)
colnames(pred.1) <- c("Winner", "n", "First")
pred.2 <- standings %>% filter(Rank == 2) %>% group_by(Winner) %>% count()
pred.2$Pct <- (pred.2$n/nsim)
colnames(pred.2) <- c("Winner", "n", "Second")
pred.3 <- standings %>% filter(Rank == 3) %>% group_by(Winner) %>% count()
pred.3$Pct <- (pred.3$n/nsim)
colnames(pred.3) <- c("Winner", "n", "Third")
pred.4 <- standings %>% filter(Rank == 4) %>% group_by(Winner) %>% count()
pred.4$Pct <- (pred.4$n/nsim)
colnames(pred.4) <- c("Winner", "n", "Fourth")
pred.5 <- standings %>% filter(Rank == 5) %>% group_by(Winner) %>% count()
pred.5$Pct <- (pred.5$n/nsim)
colnames(pred.5) <- c("Winner", "n", "Fifth")
pred.6 <- standings %>% filter(Rank > 5) %>% group_by(Winner) %>% count()
pred.6$Pct <- (pred.6$n/nsim)
colnames(pred.6) <- c("Winner", "n", "Out")
predictions <- ungroup(as.data.frame(standings$Winner[1:10]))
colnames(predictions) <- "Winner"
predictions <- pred.1 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.2 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.3 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.4 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.5 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.6 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions$Team <- predictions$Winner
predictions <- predictions %>% left_join(current.elos, by = "Team")
predictions <- predictions %>% ungroup() %>% select(-Winner)
predictions <- predictions %>%
mutate(First = percent(First, 1)) %>%
mutate(Second = percent(Second, 1)) %>%
mutate(Third = percent(Third, 1)) %>%
mutate(Fourth = percent(Fourth, 1)) %>%
mutate(Fifth = percent(Fifth, 1)) %>%
mutate(Out = percent(Out, 1))
teamstats <- read_csv("teamstats.csv")
predictions <- predictions %>% left_join(teamstats, by = "Team")
predictions <- predictions %>% select(Rank, Team, Elo, wRCplus, FIP, First, Second, Third, Fourth, Fifth, Out)
write_csv(predictions, "predictions.csv")
## Render Elo Pages
render("~/Google Drive/KBO/kbofancystats/content/elo.Rmd")
render("~/Google Drive/KBO/kbofancystats/content/elohistory.Rmd")
setwd("~/Google Drive/KBO/kbofancystats")
serve_site()
View(standings)
library(blogdown)
library(rmarkdown)
library(tidyverse)
library(rvest)
library(elo)
library(scales)
setwd("~/Google Drive/KBO")
## Scrape 2020 Schedule and Results
links <- read_csv("mykboweeks.csv")
links <- links$url
all.results <- NA
all.schedule <- NA
for (i in links){
url <- i
week <-  substring(url, first = 38)
d <- read_html(url) %>% html_table() %>% as.data.frame() %>% select(-X2, -X4)
d <- d[2:(nrow(d)-1),]
d <- d %>% filter(str_detect(X1, "2020") == F)
d <- d %>% separate(X1, c("away1", "away2"))
d <- d %>% separate(X5, c("home1", "home2"))
d <- d %>% separate(X3, c("A.Score", "H.Score"))
d$Away <- paste(d$away1, d$away2)
d$Home <- paste(d$home1, d$home2)
d$week <- as.Date(week)
d$Year <- 2020
d$addday <- rep(0:5, each = 5)
d$Date <- as.Date(d$week + d$addday)
results <- d %>% filter(str_detect(H.Score, "0am") == F) %>% select(Date, Home, Away, H.Score, A.Score, Year)
schedule <- d %>% filter(str_detect(H.Score, "0am") == T) %>% select(Home, Away, Date, Year)
all.results <- rbind(all.results, results)
all.schedule <- rbind(all.schedule, schedule)
}
all.results <- all.results[2:nrow(all.results),]
all.schedule <- all.schedule[2:nrow(all.schedule),]
View(all.results)
## Tally Current Win Totals
all.results <- mutate(all.results, Winner = ifelse(H.Score > A.Score, as.character(Home), as.character(Away)))
wins <- all.results %>% group_by(Winner) %>% count()
View(wins)
## Read In Historical Results
kbohistory <- read_csv("kboresults.csv")
kbohistory$Date <- ISOdate(kbohistory$Year, kbohistory$Month, kbohistory$Day)
kbohistory <- kbohistory %>% select(Date, Home, Away, H.Score, A.Score, Year)
all.history <- rbind(kbohistory, all.results)
all.history <- all.history[order(all.history$Date),]
all.history$H.Score <- as.double(all.history$H.Score)
all.history$A.Score <- as.double(all.history$A.Score)
## Run Elo
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.5) + k(4*(abs(H.Score - A.Score)^(1/4))), data = all.history)
all.history$H.Elo <- elo[[1]][,7]
all.history$A.Elo <- elo[[1]][,8]
## Create Elo History Table
home <- all.history %>% select(Date, Home, H.Elo)
away <- all.history %>% select(Date, Away, A.Elo)
cols <- c("Date", "Team", "Elo")
colnames(home) <- cols
colnames(away) <- cols
elo.history <- rbind(home,away)
elo.history$Elo <- round(elo.history$Elo, digits = 0)
## Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
write_csv(current.elos, "currentelos.csv")
## Ten Team Era for History Page
tenteam <- elo.history %>% filter(Date > ISOdate(2013,1,1))
write_csv(tenteam,"elohistory.csv")
## Simulations
nsim <- 10
all.schedule$Prediction <- predict(elo, newdata = all.schedule)
all.schedule <- data.frame(all.schedule, Round = rep(1:nsim, each = nrow(all.schedule)))
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count()
standings <- standings %>% left_join(wins, by = "Winner")
all.results <- all.results %>% select(-Winner)
kbohistory <- read_csv("kboresults.csv")
kbohistory$Date <- ISOdate(kbohistory$Year, kbohistory$Month, kbohistory$Day)
kbohistory <- kbohistory %>% select(Date, Home, Away, H.Score, A.Score, Year)
all.history <- rbind(kbohistory, all.results)
all.history <- all.history[order(all.history$Date),]
all.history$H.Score <- as.double(all.history$H.Score)
all.history$A.Score <- as.double(all.history$A.Score)
## Run Elo
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.5) + k(4*(abs(H.Score - A.Score)^(1/4))), data = all.history)
all.history$H.Elo <- elo[[1]][,7]
all.history$A.Elo <- elo[[1]][,8]
## Create Elo History Table
home <- all.history %>% select(Date, Home, H.Elo)
away <- all.history %>% select(Date, Away, A.Elo)
cols <- c("Date", "Team", "Elo")
colnames(home) <- cols
colnames(away) <- cols
elo.history <- rbind(home,away)
elo.history$Elo <- round(elo.history$Elo, digits = 0)
## Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
write_csv(current.elos, "currentelos.csv")
## Ten Team Era for History Page
tenteam <- elo.history %>% filter(Date > ISOdate(2013,1,1))
write_csv(tenteam,"elohistory.csv")
View(current.elos)
nsim <- 10
all.schedule$Prediction <- predict(elo, newdata = all.schedule)
all.schedule <- data.frame(all.schedule, Round = rep(1:nsim, each = nrow(all.schedule)))
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count()
standings <- standings %>% left_join(wins, by = "Winner")
View(standings)
stnadings$n <- stnadings$n.x + stnadings$n.y
standings <- standings %>% arrange(desc(n)) %>% arrange(Round)
standings$n <- standings$n.x + standings$n.y
standings <- standings %>% arrange(desc(n)) %>% arrange(Round)
standings$Rank <- rep(1:10, max(standings$Round))
pred.1 <- standings %>% filter(Rank == 1) %>% group_by(Winner) %>% count()
pred.1$Pct <- (pred.1$n/nsim)
colnames(pred.1) <- c("Winner", "n", "First")
pred.2 <- standings %>% filter(Rank == 2) %>% group_by(Winner) %>% count()
pred.2$Pct <- (pred.2$n/nsim)
colnames(pred.2) <- c("Winner", "n", "Second")
pred.3 <- standings %>% filter(Rank == 3) %>% group_by(Winner) %>% count()
pred.3$Pct <- (pred.3$n/nsim)
colnames(pred.3) <- c("Winner", "n", "Third")
pred.4 <- standings %>% filter(Rank == 4) %>% group_by(Winner) %>% count()
pred.4$Pct <- (pred.4$n/nsim)
colnames(pred.4) <- c("Winner", "n", "Fourth")
pred.5 <- standings %>% filter(Rank == 5) %>% group_by(Winner) %>% count()
pred.5$Pct <- (pred.5$n/nsim)
colnames(pred.5) <- c("Winner", "n", "Fifth")
pred.6 <- standings %>% filter(Rank > 5) %>% group_by(Winner) %>% count()
pred.6$Pct <- (pred.6$n/nsim)
colnames(pred.6) <- c("Winner", "n", "Out")
predictions <- ungroup(as.data.frame(standings$Winner[1:10]))
colnames(predictions) <- "Winner"
predictions <- pred.1 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.2 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.3 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.4 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.5 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.6 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions$Team <- predictions$Winner
predictions <- predictions %>% left_join(current.elos, by = "Team")
predictions <- predictions %>% ungroup() %>% select(-Winner)
predictions <- predictions %>%
mutate(First = percent(First, 1)) %>%
mutate(Second = percent(Second, 1)) %>%
mutate(Third = percent(Third, 1)) %>%
mutate(Fourth = percent(Fourth, 1)) %>%
mutate(Fifth = percent(Fifth, 1)) %>%
mutate(Out = percent(Out, 1))
teamstats <- read_csv("teamstats.csv")
predictions <- predictions %>% left_join(teamstats, by = "Team")
predictions <- predictions %>% select(Rank, Team, Elo, wRCplus, FIP, First, Second, Third, Fourth, Fifth, Out)
View(predictions)
library(blogdown)
library(rmarkdown)
library(tidyverse)
library(rvest)
library(elo)
library(scales)
setwd("~/Google Drive/KBO")
## Scrape 2020 Schedule and Results
links <- read_csv("mykboweeks.csv")
links <- links$url
all.results <- NA
all.schedule <- NA
for (i in links){
url <- i
week <-  substring(url, first = 38)
d <- read_html(url) %>% html_table() %>% as.data.frame() %>% select(-X2, -X4)
d <- d[2:(nrow(d)-1),]
d <- d %>% filter(str_detect(X1, "2020") == F)
d <- d %>% separate(X1, c("away1", "away2"))
d <- d %>% separate(X5, c("home1", "home2"))
d <- d %>% separate(X3, c("A.Score", "H.Score"))
d$Away <- paste(d$away1, d$away2)
d$Home <- paste(d$home1, d$home2)
d$week <- as.Date(week)
d$Year <- 2020
d$addday <- rep(0:5, each = 5)
d$Date <- as.Date(d$week + d$addday)
results <- d %>% filter(str_detect(H.Score, "0am") == F) %>% select(Date, Home, Away, H.Score, A.Score, Year)
schedule <- d %>% filter(str_detect(H.Score, "0am") == T) %>% select(Home, Away, Date, Year)
all.results <- rbind(all.results, results)
all.schedule <- rbind(all.schedule, schedule)
}
all.results <- all.results[2:nrow(all.results),]
all.schedule <- all.schedule[2:nrow(all.schedule),]
## Tally Current Win Totals
all.results <- mutate(all.results, Winner = ifelse(H.Score > A.Score, as.character(Home), as.character(Away)))
wins <- all.results %>% group_by(Winner) %>% count()
all.results <- all.results %>% select(-Winner)
## Read In Historical Results
kbohistory <- read_csv("kboresults.csv")
kbohistory$Date <- ISOdate(kbohistory$Year, kbohistory$Month, kbohistory$Day)
kbohistory <- kbohistory %>% select(Date, Home, Away, H.Score, A.Score, Year)
all.history <- rbind(kbohistory, all.results)
all.history <- all.history[order(all.history$Date),]
all.history$H.Score <- as.double(all.history$H.Score)
all.history$A.Score <- as.double(all.history$A.Score)
## Run Elo
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.5) + k(4*(abs(H.Score - A.Score)^(1/4))), data = all.history)
all.history$H.Elo <- elo[[1]][,7]
all.history$A.Elo <- elo[[1]][,8]
## Create Elo History Table
home <- all.history %>% select(Date, Home, H.Elo)
away <- all.history %>% select(Date, Away, A.Elo)
cols <- c("Date", "Team", "Elo")
colnames(home) <- cols
colnames(away) <- cols
elo.history <- rbind(home,away)
elo.history$Elo <- round(elo.history$Elo, digits = 0)
## Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
write_csv(current.elos, "currentelos.csv")
## Ten Team Era for History Page
tenteam <- elo.history %>% filter(Date > ISOdate(2013,1,1))
write_csv(tenteam,"elohistory.csv")
## Simulations
nsim <- 100000
all.schedule$Prediction <- predict(elo, newdata = all.schedule)
all.schedule <- data.frame(all.schedule, Round = rep(1:nsim, each = nrow(all.schedule)))
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count()
standings <- standings %>% left_join(wins, by = "Winner")
standings$n <- standings$n.x + standings$n.y
standings <- standings %>% arrange(desc(n)) %>% arrange(Round)
standings$Rank <- rep(1:10, max(standings$Round))
pred.1 <- standings %>% filter(Rank == 1) %>% group_by(Winner) %>% count()
pred.1$Pct <- (pred.1$n/nsim)
colnames(pred.1) <- c("Winner", "n", "First")
pred.2 <- standings %>% filter(Rank == 2) %>% group_by(Winner) %>% count()
pred.2$Pct <- (pred.2$n/nsim)
colnames(pred.2) <- c("Winner", "n", "Second")
pred.3 <- standings %>% filter(Rank == 3) %>% group_by(Winner) %>% count()
pred.3$Pct <- (pred.3$n/nsim)
colnames(pred.3) <- c("Winner", "n", "Third")
pred.4 <- standings %>% filter(Rank == 4) %>% group_by(Winner) %>% count()
pred.4$Pct <- (pred.4$n/nsim)
colnames(pred.4) <- c("Winner", "n", "Fourth")
pred.5 <- standings %>% filter(Rank == 5) %>% group_by(Winner) %>% count()
pred.5$Pct <- (pred.5$n/nsim)
colnames(pred.5) <- c("Winner", "n", "Fifth")
pred.6 <- standings %>% filter(Rank > 5) %>% group_by(Winner) %>% count()
pred.6$Pct <- (pred.6$n/nsim)
colnames(pred.6) <- c("Winner", "n", "Out")
predictions <- ungroup(as.data.frame(standings$Winner[1:10]))
colnames(predictions) <- "Winner"
predictions <- pred.1 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.2 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.3 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.4 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.5 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.6 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions$Team <- predictions$Winner
predictions <- predictions %>% left_join(current.elos, by = "Team")
predictions <- predictions %>% ungroup() %>% select(-Winner)
predictions <- predictions %>%
mutate(First = percent(First, 1)) %>%
mutate(Second = percent(Second, 1)) %>%
mutate(Third = percent(Third, 1)) %>%
mutate(Fourth = percent(Fourth, 1)) %>%
mutate(Fifth = percent(Fifth, 1)) %>%
mutate(Out = percent(Out, 1))
teamstats <- read_csv("teamstats.csv")
predictions <- predictions %>% left_join(teamstats, by = "Team")
predictions <- predictions %>% select(Rank, Team, Elo, wRCplus, FIP, First, Second, Third, Fourth, Fifth, Out)
write_csv(predictions, "predictions.csv")
## Render Elo Pages
render("~/Google Drive/KBO/kbofancystats/content/elo.Rmd")
render("~/Google Drive/KBO/kbofancystats/content/elohistory.Rmd")
setwd("~/Google Drive/KBO/kbofancystats")
serve_site()
View(standings)
standings$n.y[is.na(standings$n.y)] <- 0
standings$n <- standings$n.x + standings$n.y
standings <- standings %>% arrange(desc(n)) %>% arrange(Round)
standings$Rank <- rep(1:10, max(standings$Round))
pred.1 <- standings %>% filter(Rank == 1) %>% group_by(Winner) %>% count()
pred.1$Pct <- (pred.1$n/nsim)
colnames(pred.1) <- c("Winner", "n", "First")
pred.2 <- standings %>% filter(Rank == 2) %>% group_by(Winner) %>% count()
pred.2$Pct <- (pred.2$n/nsim)
colnames(pred.2) <- c("Winner", "n", "Second")
pred.3 <- standings %>% filter(Rank == 3) %>% group_by(Winner) %>% count()
pred.3$Pct <- (pred.3$n/nsim)
colnames(pred.3) <- c("Winner", "n", "Third")
pred.4 <- standings %>% filter(Rank == 4) %>% group_by(Winner) %>% count()
pred.4$Pct <- (pred.4$n/nsim)
colnames(pred.4) <- c("Winner", "n", "Fourth")
pred.5 <- standings %>% filter(Rank == 5) %>% group_by(Winner) %>% count()
pred.5$Pct <- (pred.5$n/nsim)
colnames(pred.5) <- c("Winner", "n", "Fifth")
pred.6 <- standings %>% filter(Rank > 5) %>% group_by(Winner) %>% count()
pred.6$Pct <- (pred.6$n/nsim)
colnames(pred.6) <- c("Winner", "n", "Out")
predictions <- ungroup(as.data.frame(standings$Winner[1:10]))
colnames(predictions) <- "Winner"
predictions <- pred.1 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.2 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.3 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.4 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.5 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.6 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions$Team <- predictions$Winner
predictions <- predictions %>% left_join(current.elos, by = "Team")
predictions <- predictions %>% ungroup() %>% select(-Winner)
predictions <- predictions %>%
mutate(First = percent(First, 1)) %>%
mutate(Second = percent(Second, 1)) %>%
mutate(Third = percent(Third, 1)) %>%
mutate(Fourth = percent(Fourth, 1)) %>%
mutate(Fifth = percent(Fifth, 1)) %>%
mutate(Out = percent(Out, 1))
teamstats <- read_csv("teamstats.csv")
predictions <- predictions %>% left_join(teamstats, by = "Team")
predictions <- predictions %>% select(Rank, Team, Elo, wRCplus, FIP, First, Second, Third, Fourth, Fifth, Out)
write_csv(predictions, "predictions.csv")
## Render Elo Pages
render("~/Google Drive/KBO/kbofancystats/content/elo.Rmd")
render("~/Google Drive/KBO/kbofancystats/content/elohistory.Rmd")
setwd("~/Google Drive/KBO/kbofancystats")
serve_site()
setwd("~/Google Drive/KBO")
teamstats <- read_csv("teamstats.csv")
predictions <- predictions %>% left_join(teamstats, by = "Team")
predictions <- predictions %>% select(Rank, Team, Elo, wRCplus, FIP, First, Second, Third, Fourth, Fifth, Out)
View(predictions)
predictions <- ungroup(as.data.frame(standings$Winner[1:10]))
colnames(predictions) <- "Winner"
predictions <- pred.1 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.2 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.3 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.4 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.5 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.6 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions$Team <- predictions$Winner
predictions <- predictions %>% left_join(current.elos, by = "Team")
predictions <- predictions %>% ungroup() %>% select(-Winner)
predictions <- predictions %>%
mutate(First = percent(First, 1)) %>%
mutate(Second = percent(Second, 1)) %>%
mutate(Third = percent(Third, 1)) %>%
mutate(Fourth = percent(Fourth, 1)) %>%
mutate(Fifth = percent(Fifth, 1)) %>%
mutate(Out = percent(Out, 1))
teamstats <- read_csv("teamstats.csv")
predictions <- predictions %>% left_join(teamstats, by = "Team")
predictions <- predictions %>% select(Rank, Team, Elo, wRCplus, FIP, First, Second, Third, Fourth, Fifth, Out)
write_csv(predictions, "predictions.csv")
View(predictions)
## Render Elo Pages
render("~/Google Drive/KBO/kbofancystats/content/elo.Rmd")
render("~/Google Drive/KBO/kbofancystats/content/elohistory.Rmd")
setwd("~/Google Drive/KBO/kbofancystats")
serve_site()
