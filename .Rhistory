communities$tw_pct <- communities$tw_count/sum(communities$tw_count)
communities$more_tweets <- communities$tw_pct - communities$bt_pct
View(communities)
communities
communities %>% arrange(more_tweets)
municipalities %>% arrange(more_tweets)
# CSV exports
write_csv(communities, "~/research/communities.csv")
write_csv(municipalities, "~/research/municipalities.csv")
municipalities %>% arrange(desc(more_tweets)
)
# Names of all required packages that we will be using during the course
all_pkgs <- c('tidyverse', 'jtools', 'sjPlot','ggplot2','ggthemes','haven','foreign','essurvey','stargazer','knitr','prais','orcutt','fastDummies')
# Install all the packages (it may take a few minutes to install all of them)
install.packages(all_pkgs, dependencies = TRUE)
# Verify the installation worked correctly
setdiff(all_pkgs, row.names(installed.packages()))
library(essurvey)
?essurvey
library(tidyverse)
library(lubridate)
# Read in stats and fix times
swimstats <- read_csv("~/Google Drive/Personal Documents/swimstats.csv")
swimstats$time <- duration(as.numeric(sub("s.*", "", swimstats$time)), "seconds")
swimstats$fast.50 <- duration(as.numeric(sub("s.*", "", swimstats$fast.50)), "seconds")
swimstats$fast.100 <- duration(as.numeric(sub("s.*", "", swimstats$fast.100)), "seconds")
swimstats$fast.200 <- duration(as.numeric(sub("s.*", "", swimstats$fast.200)), "seconds")
View(swimstats)
pr50 <- swimstats %>% arrange(fast.50) %>% select(date,fast.50)
names(pr50) <- c("date","pr")
pr50 <- pr50[1,]
pr100 <- swimstats %>% arrange(fast.100) %>% select(date,fast.100)
names(pr100) <- c("date","pr")
pr100 <- pr100[1,]
pr200 <- swimstats %>% arrange(fast.200) %>% select(date, fast.200)
names(pr200) <- c("date","pr")
pr200 <- pr200[1,]
pr <- rbind(pr50,pr100,pr200)
pr$category <- c("Fastest 50m","Fastest 100m","Fastest 200m")
pr <- pr %>% select(category, pr,date)
pr$days.since <- Sys.Date() - pr$date
prdist <- swimstats %>% arrange(desc(meters)) %>% select(date,meters)
names(prdist) <- c("date","pr")
prdist <- prdist[1,]
prcont <- swimstats %>% arrange(desc(long)) %>% select(date,long)
names(prcont) <- c("date","pr")
prcont <- prcont[1,]
prspeed <- swimstats %>% arrange(desc(meters.per.sec)) %>% select(date,meters.per.sec)
names(prspeed) <- c("date","pr")
prspeed <- prspeed[1,]
pr2 <- rbind(prdist,prcont,prspeed)
pr2$category <- c("Total Distance","Cont. Distance","Meters/Second")
pr2 <- pr2 %>% select(category, pr,date)
pr2$days.since <- Sys.Date() - pr2$date
pr
pr2
ggplot(swimstats %>% filter(date>as.Date("2020-03-01"))) + geom_point(aes(date,meters.per.sec))
ggplot(swimstats %>% filter(date>as.Date("2020-08-01"))) + geom_point(aes(date,meters.per.sec))
# KBO Fancy Stats
source("~/Google Drive/KBO/2020elo.R")
source("~/Google Drive/KBO/2020stats.R")
source("~/Google Drive/KBO/2020stats.R")
source("~/Google Drive/Futbol/c19update.R")
58+29.1+60+55.6+28.8
57.4+33.5+25.7
library(tidyverse)
library(lubridate)
# Read in stats and fix times
swimstats <- read_csv("~/Google Drive/Personal Documents/swimstats.csv")
swimstats$time <- duration(as.numeric(sub("s.*", "", swimstats$time)), "seconds")
swimstats$fast.50 <- duration(as.numeric(sub("s.*", "", swimstats$fast.50)), "seconds")
swimstats$fast.100 <- duration(as.numeric(sub("s.*", "", swimstats$fast.100)), "seconds")
swimstats$fast.200 <- duration(as.numeric(sub("s.*", "", swimstats$fast.200)), "seconds")
# Add new swim
newswim <- tibble(as_date("2020-09-25"), # Date
duration(60*56+18, "seconds"), # Time
2100, # Meters
519, # Calories
duration(48.4, "seconds"), # Fastest 50m Freestyle
duration(60*1+53, "seconds"), # Fastest 100m Freestyle
duration(231.5, "seconds"), # Fastest 200m Freestyle
1250, # Longest Continuous Distance
2.55, # Meters Per Stroke (DPS)
3.13) # Seconds Per Stroke (Stroke Rate)
newswim[1,11] <- (newswim[1,9]/newswim[1,10]) # Meters Per Second
swimstats[(nrow(swimstats)+1),] <- newswim
# Overwrite csv
write_csv(swimstats,"~/Google Drive/Personal Documents/swimstats.csv")
# PRs and Totals
pr50 <- swimstats %>% arrange(fast.50) %>% select(date,fast.50)
names(pr50) <- c("date","pr")
pr50 <- pr50[1,]
pr100 <- swimstats %>% arrange(fast.100) %>% select(date,fast.100)
names(pr100) <- c("date","pr")
pr100 <- pr100[1,]
pr200 <- swimstats %>% arrange(fast.200) %>% select(date, fast.200)
names(pr200) <- c("date","pr")
pr200 <- pr200[1,]
pr <- rbind(pr50,pr100,pr200)
pr$category <- c("Fastest 50m","Fastest 100m","Fastest 200m")
pr <- pr %>% select(category, pr,date)
pr$days.since <- Sys.Date() - pr$date
prdist <- swimstats %>% arrange(desc(meters)) %>% select(date,meters)
names(prdist) <- c("date","pr")
prdist <- prdist[1,]
prcont <- swimstats %>% arrange(desc(long)) %>% select(date,long)
names(prcont) <- c("date","pr")
prcont <- prcont[1,]
prspeed <- swimstats %>% arrange(desc(meters.per.sec)) %>% select(date,meters.per.sec)
names(prspeed) <- c("date","pr")
prspeed <- prspeed[1,]
pr2 <- rbind(prdist,prcont,prspeed)
pr2$category <- c("Total Distance","Cont. Distance","Meters/Second")
pr2 <- pr2 %>% select(category, pr,date)
pr2$days.since <- Sys.Date() - pr2$date
pr
pr2
# Plots
#ggplot(swimstats %>% filter(date>as.Date("2020-08-01"))) + geom_point(aes(date,meters.per.sec))
#ggplot(swimstats) + geom_point(aes(calories,meters))
View(swimstats)
sum(swimstats$meters)
ggplot(swimstats %>% filter(date>as.Date("2020-08-01"))) + geom_point(aes(date,meters))
ggplot(swimstats %>% filter(date>as.Date("2020-04-01"))) + geom_point(aes(date,meters))
## Updates
# KBO Fancy Stats
source("~/Google Drive/KBO/2020elo.R")
source("~/Google Drive/KBO/2020stats.R")
# KBO Fancy Stats
source("~/Google Drive/KBO/2020elo.R")
# KBO Fancy Stats
source("~/Google Drive/KBO/2020elo.R")
suppressMessages(library(blogdown))
suppressMessages(library(rmarkdown))
suppressMessages(library(tidyverse))
suppressMessages(library(rvest))
suppressMessages(library(elo))
suppressMessages(library(scales))
options(dplyr.summarise.inform=F)
setwd("~/Google Drive/KBO")
## Scrape 2020 Schedule and Results
links <- read_csv("mykboweeks.csv", col_types = cols())
links$date <- as.Date(str_sub(links$url,-10,-1))
links <- links %>% filter(date < (Sys.Date()+1))
links <- links$url
all.results <- NA
for (i in links){
print(paste0("Scraping: ",i))
url <- i
week <- substring(url, first = 38)
d <- read_html(url) %>% html_table() %>% as.data.frame() %>% select(-X2, -X4)
d <- d[2:(nrow(d)-1),]
d <- d %>% filter(str_detect(X1, "2020") == F)
d <- d %>% separate(X1, c("away1", "away2"), extra = "drop")
d <- d %>% separate(X5, c("home1", "home2"), extra = "drop")
d <- d %>% separate(X3, c("A.Score", "H.Score"), extra = "drop")
d$Away <- paste(d$away1, d$away2)
d$Home <- paste(d$home1, d$home2)
d$week <- as.Date(week)
d$Year <- 2020
d$addday <- rep(0:6, each = 5, length.out = nrow(d))
d$Date <- as.Date(d$week + d$addday)
results <- d %>% filter(!str_detect(H.Score, "0am") & !str_detect(A.Score, "Canceled")) %>% select(Date, Home, Away, H.Score, A.Score, Year)
all.results <- rbind(all.results, results)
}
all.results <- all.results[2:nrow(all.results),]
## Build complete set of 720 games
all.schedule <- as.data.frame(rep(unique(all.results$Home), each = 10))
all.schedule$Away <- rep(unique(all.results$Home), times = 10)
colnames(all.schedule)[1] <- "Home"
all.schedule <- all.schedule %>% filter(Home != Away)
all.schedule <- data.frame(all.schedule, Matchup = rep(1:8, each = 90))
all.schedule$key <- paste(all.schedule$Home,all.schedule$Away,all.schedule$Matchup)
completed <- data.frame(paste(all.results$Home,all.results$Away))
colnames(completed)[1] <- "Matchup"
completed <- completed %>% group_by(Matchup) %>% mutate(key=row_number())
completed$Matchup <- paste(completed$Matchup,completed$key)
completed <- as.character(completed$Matchup)
all.schedule <- all.schedule %>% filter(!key %in% completed) %>% select(Home, Away)
all.results$H.Score <- as.numeric(all.results$H.Score)
all.results$A.Score <- as.numeric(all.results$A.Score)
all.results <- mutate(all.results, H.Win = ifelse(H.Score > A.Score, 1,
ifelse(H.Score == A.Score, .5, 0)))
all.results <- mutate(all.results, A.Win = ifelse(H.Score < A.Score, 1,
ifelse(H.Score == A.Score, .5, 0)))
h.wins <- all.results %>% select(Home, H.Win)
names(h.wins) <- c("Winner", "n")
a.wins <- all.results %>% select(Away, A.Win)
names(a.wins) <- c("Winner", "n")
wins <- rbind(h.wins,a.wins)
wins <- wins %>% group_by(Winner) %>% summarize(n = sum(n))
all.results <- all.results %>% select(-H.Win, -A.Win)
## Read In Historical Results
kbohistory <- read_csv("kboresults.csv", col_types = cols())
kbohistory$Date <- ISOdate(kbohistory$Year, kbohistory$Month, kbohistory$Day)
kbohistory <- kbohistory %>% select(Date, Home, Away, H.Score, A.Score, Year)
all.history <- rbind(kbohistory, all.results)
all.history <- all.history[order(all.history$Date),]
all.history$H.Score <- as.double(all.history$H.Score)
all.history$A.Score <- as.double(all.history$A.Score)
## Run Elo
print("Running model...")
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.5) + k(4*(abs(H.Score - A.Score)^(1/4))), data = all.history)
all.history$H.Elo <- elo[[1]][,7]
all.history$A.Elo <- elo[[1]][,8]
home <- all.history %>% select(Date, Home, H.Elo)
away <- all.history %>% select(Date, Away, A.Elo)
cols <- c("Date", "Team", "Elo")
colnames(home) <- cols
colnames(away) <- cols
elo.history <- rbind(home,away)
elo.history$Elo <- round(elo.history$Elo, digits = 0)
## Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
write_csv(current.elos, "currentelos.csv")
## Ten Team Era for History Page
elo.history$Date <- as.Date(elo.history$Date)
tenteam <- elo.history %>% filter(Date > as.Date("2013-01-01"))
write_csv(tenteam,"elohistory.csv")
## Simulations
print("Simulating...")
nsim <- 100000
all.schedule$Prediction <- predict(elo, newdata = all.schedule)
all.schedule <- data.frame(all.schedule, Round = rep(1:nsim, each = nrow(all.schedule)))
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count(wt = n())
standings <- standings %>% left_join(wins, by = "Winner")
standings$n.y[is.na(standings$n.y)] <- 0
standings$n <- standings$n.x + standings$n.y
standings$tiebreak <- runif((nrow(standings)),0,1)
standings <- standings %>% arrange(tiebreak) %>% arrange(desc(n)) %>% arrange(Round)
standings$Rank <- rep(1:10, max(standings$Round))
pred.1 <- standings %>% filter(Rank == 1) %>% group_by(Winner) %>% count(wt = n())
pred.1$Pct <- (pred.1$n/nsim)
colnames(pred.1) <- c("Winner", "n", "First")
pred.2 <- standings %>% filter(Rank == 2) %>% group_by(Winner) %>% count(wt = n())
pred.2$Pct <- (pred.2$n/nsim)
colnames(pred.2) <- c("Winner", "n", "Second")
pred.3 <- standings %>% filter(Rank == 3) %>% group_by(Winner) %>% count(wt = n())
pred.3$Pct <- (pred.3$n/nsim)
colnames(pred.3) <- c("Winner", "n", "Third")
pred.4 <- standings %>% filter(Rank == 4) %>% group_by(Winner) %>% count(wt = n())
pred.4$Pct <- (pred.4$n/nsim)
colnames(pred.4) <- c("Winner", "n", "Fourth")
pred.5 <- standings %>% filter(Rank == 5) %>% group_by(Winner) %>% count(wt = n())
pred.5$Pct <- (pred.5$n/nsim)
colnames(pred.5) <- c("Winner", "n", "Fifth")
pred.6 <- standings %>% filter(Rank > 5) %>% group_by(Winner) %>% count(wt = n())
pred.6$Pct <- (pred.6$n/nsim)
colnames(pred.6) <- c("Winner", "n", "Out")
# KBO Fancy Stats
source("~/Google Drive/KBO/2020elo.R")
source("~/Google Drive/Futbol/c19update.R")
source("~/Google Drive/KBO/2020stats.R")
# FutStat.cat
source("~/Google Drive/Futbol/futstat.R")
source("~/Google Drive/Futbol/c19update.R")
# KBO Fancy Stats
source("~/Google Drive/KBO/2020elo.R")
# KBO Fancy Stats
source("~/Google Drive/KBO/2020elo.R")
View(standings)
suppressMessages(library(blogdown))
suppressMessages(library(rmarkdown))
suppressMessages(library(tidyverse))
suppressMessages(library(rvest))
suppressMessages(library(elo))
suppressMessages(library(scales))
options(dplyr.summarise.inform=F)
setwd("~/Google Drive/KBO")
## Scrape 2020 Schedule and Results
links <- read_csv("mykboweeks.csv", col_types = cols())
links$date <- as.Date(str_sub(links$url,-10,-1))
links <- links %>% filter(date < (Sys.Date()+1))
links <- links$url
all.results <- NA
for (i in links){
print(paste0("Scraping: ",i))
url <- i
week <- substring(url, first = 38)
d <- read_html(url) %>% html_table() %>% as.data.frame() %>% select(-X2, -X4)
d <- d[2:(nrow(d)-1),]
d <- d %>% filter(str_detect(X1, "2020") == F)
d <- d %>% separate(X1, c("away1", "away2"), extra = "drop")
d <- d %>% separate(X5, c("home1", "home2"), extra = "drop")
d <- d %>% separate(X3, c("A.Score", "H.Score"), extra = "drop")
d$Away <- paste(d$away1, d$away2)
d$Home <- paste(d$home1, d$home2)
d$week <- as.Date(week)
d$Year <- 2020
d$addday <- rep(0:6, each = 5, length.out = nrow(d))
d$Date <- as.Date(d$week + d$addday)
results <- d %>% filter(!str_detect(H.Score, "0am") & !str_detect(A.Score, "Canceled")) %>% select(Date, Home, Away, H.Score, A.Score, Year)
all.results <- rbind(all.results, results)
}
all.results <- all.results[2:nrow(all.results),]
## Build complete set of 720 games
all.schedule <- as.data.frame(rep(unique(all.results$Home), each = 10))
all.schedule$Away <- rep(unique(all.results$Home), times = 10)
colnames(all.schedule)[1] <- "Home"
all.schedule <- all.schedule %>% filter(Home != Away)
all.schedule <- data.frame(all.schedule, Matchup = rep(1:8, each = 90))
all.schedule$key <- paste(all.schedule$Home,all.schedule$Away,all.schedule$Matchup)
## Remove Completed Games
completed <- data.frame(paste(all.results$Home,all.results$Away))
colnames(completed)[1] <- "Matchup"
completed <- completed %>% group_by(Matchup) %>% mutate(key=row_number())
completed$Matchup <- paste(completed$Matchup,completed$key)
completed <- as.character(completed$Matchup)
all.schedule <- all.schedule %>% filter(!key %in% completed) %>% select(Home, Away)
## Tally Current Win Totals
all.results$H.Score <- as.numeric(all.results$H.Score)
all.results$A.Score <- as.numeric(all.results$A.Score)
all.results <- mutate(all.results, H.Win = ifelse(H.Score > A.Score, 1,
ifelse(H.Score == A.Score, .5, 0)))
all.results <- mutate(all.results, A.Win = ifelse(H.Score < A.Score, 1,
ifelse(H.Score == A.Score, .5, 0)))
h.wins <- all.results %>% select(Home, H.Win)
names(h.wins) <- c("Winner", "n")
a.wins <- all.results %>% select(Away, A.Win)
names(a.wins) <- c("Winner", "n")
wins <- rbind(h.wins,a.wins)
wins <- wins %>% group_by(Winner) %>% summarize(n = sum(n))
all.results <- all.results %>% select(-H.Win, -A.Win)
## Read In Historical Results
kbohistory <- read_csv("kboresults.csv", col_types = cols())
kbohistory$Date <- ISOdate(kbohistory$Year, kbohistory$Month, kbohistory$Day)
kbohistory <- kbohistory %>% select(Date, Home, Away, H.Score, A.Score, Year)
all.history <- rbind(kbohistory, all.results)
all.history <- all.history[order(all.history$Date),]
all.history$H.Score <- as.double(all.history$H.Score)
all.history$A.Score <- as.double(all.history$A.Score)
## Run Elo
print("Running model...")
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.5) + k(4*(abs(H.Score - A.Score)^(1/4))), data = all.history)
all.history$H.Elo <- elo[[1]][,7]
all.history$A.Elo <- elo[[1]][,8]
## Create Elo History Table
home <- all.history %>% select(Date, Home, H.Elo)
away <- all.history %>% select(Date, Away, A.Elo)
cols <- c("Date", "Team", "Elo")
colnames(home) <- cols
colnames(away) <- cols
elo.history <- rbind(home,away)
elo.history$Elo <- round(elo.history$Elo, digits = 0)
## Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
write_csv(current.elos, "currentelos.csv")
## Ten Team Era for History Page
elo.history$Date <- as.Date(elo.history$Date)
tenteam <- elo.history %>% filter(Date > as.Date("2013-01-01"))
write_csv(tenteam,"elohistory.csv")
## Simulations
print("Simulating...")
nsim <- 100000
all.schedule$Prediction <- predict(elo, newdata = all.schedule)
all.schedule <- data.frame(all.schedule, Round = rep(1:nsim, each = nrow(all.schedule)))
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count(wt = n())
standings <- all.schedule %>% group_by(Winner, Round) %>% count(wt = n())
all.schedule
standings
tail(standings)
nrow(standings != 100000)
nrow(standings) != 100000
nrow(standings) != 1000000
key1 <- paste0(standings$Winner,standings$Round)
nrow(standings) != nsim
nrow(standings) != nsim*10
key2 <- data.frame(current.elos$Team,rep(1:nsim,10))
key2
nrow(key2) = nrow(standings)
nrow(key2) == nrow(standings)
key2$key2 <- paste0(key2$current.elos.Team, key2$rep.1.nsim..10.)
head(key2)
key3 <- key2 %>% filter(!key2 %in% key1)
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count(wt = n())
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count(wt = n())
View(results)
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count(wt = n())
nrow(standings)
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count(wt = n())
nrow(standings)
all.schedule$Sim <- runif((nrow(all.schedule)),0,1)
all.schedule <- mutate(all.schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
all.schedule <- mutate(all.schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- all.schedule %>% group_by(Winner, Round) %>% count(wt = n())
nrow(standings)
key1 <- paste0(standings$Winner,standings$Round)
key2 <- data.frame(current.elos$Team,rep(1:nsim,10))
key2$key2 <- paste0(key2$current.elos.Team, key2$rep.1.nsim..10.)
key3 <- key2 %>% filter(!key2 %in% key1)
key1
key3 <- key2 %>% filter(!key2$key2 %in% key1)
key2$key2
key1 <- paste0(standings$Winner,standings$Round)
key2 <- data.frame(current.elos$Team,rep(1:nsim,10))
key2$key <- paste0(key2$current.elos.Team, key2$rep.1.nsim..10.)
key3 <- key2 %>% filter(!key %in% key1)
key2$key
class(key1)
class(key2$key)
key2$key %in% key1
length(key2$key %in% key1)
key3 <- data.frame(key2$key %in% key1)
View(key3)
summary(key3)
key3 <- key2 %>% filter(key %in% key1)
length(key1)
length(unique(key1))
length(unique(key2$key))
tail(key1)
tail(key2$key)
key3 <- key2 %>% filter(!key %in% key1)
key3 <- key2 %>% filter(key %in% key1)
nrow(standings) != nsim*10
filter(!key2key %in% key1)
filter(!key2$key %in% key1)
subset(!key2$key %in% key1)
subset(key2, !(key %in% key1))
subset(key2, (key %in% key1))
nrow(subset(key2, (key %in% key1)))
head(standings)
test <- standings %>% group_by(Round) %>% count(wt = n())
test
View(test)
View(standings)
"SK Wyverns63992" %in% key1
"SK Wyverns63992" %in% key2$key
key1 %in% "SK Wyverns63992"
key1 <- data.frame(paste0(standings$Winner,standings$Round))
key3 <- key2 %>% filter(!key %in% key1$paste0.standings.Winner..standings.Round.)
key3 <- key2 %>% filter(key %in% key1$paste0.standings.Winner..standings.Round.)
names(key1)
names(key1) <- "key"
key$test <- 1
key1$test <- 1
key1
key3 <- key2 %>% left_join(key1, by = "key")
View(key3)
is.na(key3$test)
key4 <- key3[is.na(key3$test)]
key3[is.na(key3$test)]
key3[is.na(key3$test),]
key3[,is.na(key3$test)]
key3$test[is.na(key3$test)]
summary(key3)
View(key2)
View(key2)
View(key1)
key2 <- data.frame(current.elos$Team,rep(1:nsim,each = 10))
key2$key <- paste0(key2$current.elos.Team, key2$rep.1.nsim..10.)
key1 <- paste0(standings$Winner,standings$Round)
key3 <- key2 %>% filter(!key %in% key1)
key2$key <- paste0(key2$current.elos.Team, key2$rep.1.nsim..10.)
key3 <- key2 %>% filter(!key %in% key1)
View(key2)
key2$key <- paste0(key2$current.elos.Team, key2$rep.1.nsim..each...10.)
key3 <- key2 %>% filter(!key %in% key1)
View(key3)
standings
key3$key <- 0
key3
names(key3) <- names(standings)
key3
standings <- rbind(standings,key3)
standings <- standings %>% left_join(wins, by = "Winner")
standings$n.y[is.na(standings$n.y)] <- 0
standings$n <- standings$n.x + standings$n.y
standings$tiebreak <- runif((nrow(standings)),0,1)
standings <- standings %>% arrange(tiebreak) %>% arrange(desc(n)) %>% arrange(Round)
standings$Rank <- rep(1:10, max(standings$Round))
# KBO Fancy Stats
source("~/Google Drive/KBO/2020elo.R")
View(standings)
pred.6
pred.5
pred.1
nrow(key2)
length(key1)
nrow(key2)-length(key1)
nsim*10-length(key1)
print(paste0("Simulations with winless teams: ",nsim*10-length(key1)))
# KBO Fancy Stats
source("~/Google Drive/KBO/2020elo.R")
View(all.results)
