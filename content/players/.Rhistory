library(plotly)
library(scales)
setwd("~/Google Drive/KBO")
# Read Results, Sort By Date
results <- read_csv("kboresults.csv")
results$Date <- ISOdate(results$Year, results$Month, results$Day)
results <- results[order(results$Date),]
results <- results %>% select(-Month, -Day)
results <- results %>% filter(Home != "Dream") %>% filter(Home != "Nanum") %>% filter(Home != "East") %>% filter(Home != "West")
results <- results %>% filter(Away != "Dream") %>% filter(Away != "Nanum") %>% filter(Away != "East") %>% filter(Away != "West")
results$Home <- as.factor(results$Home)
results$Away <- as.factor(results$Away)
results$Home <- fct_recode(results$Home, "Kia Tigers" = "KIA Tigers")
results$Home <- fct_recode(results$Home, "KT Wiz" = "KT Wiz Suwon")
results$Away <- fct_recode(results$Away, "Kia Tigers" = "KIA Tigers")
results$Away <- fct_recode(results$Away, "KT Wiz" = "KT Wiz Suwon")
# Run Elo and Add to Results
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.5) + k(4*(abs(H.Score - A.Score)^(1/4))), data = results)
results$H.Elo <- elo[[1]][,7]
results$A.Elo <- elo[[1]][,8]
# Create Elo History Table, Fix Teams
home <- results %>% select(Date, Home, H.Elo)
away <- results %>% select(Date, Away, A.Elo)
cols <- c("Date", "Team", "Elo")
colnames(home) <- cols
colnames(away) <- cols
elo.history <- rbind(home,away)
# Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
#write_csv(current.elos, "currentelos.csv")
# Plot All Teams
plot <- ggplot() + geom_line(data = elo.history, aes(Date, Elo, color = Team))
ggplotly(plot)
# Plot 10 Team Era
tenteam <- elo.history %>% filter(Date > ISOdate(2013,1,1))
write_csv(tenteam,"elohistory.csv")
plot <- ggplot() + geom_line(data = tenteam, aes(Date, Elo, color = Team))
ggplotly(plot)
# Plot Current Season
current.season <- elo.history %>% filter(Date > ISOdate(max(results$Year),1,1))
plot <- ggplot() + geom_line(data = current.season, aes(Date, Elo, color = Team))
ggplotly(plot)
## Project 2020
# Dummy Regression
results.reg <- read_csv("kboresults2.csv")
results.reg$Date <- ISOdate(results.reg$Year, results.reg$Month, results.reg$Day)
results.reg <- results.reg[order(results.reg$Date),]
results.reg <- results.reg %>% select(-Month, -Day)
results.reg <- results.reg %>% filter(Home != "Dream") %>% filter(Home != "Nanum") %>% filter(Home != "East") %>% filter(Home != "West")
results.reg <- results.reg %>% filter(Away != "Dream") %>% filter(Away != "Nanum") %>% filter(Away != "East") %>% filter(Away != "West")
results.reg$Home <- as.factor(results.reg$Home)
results.reg$Away <- as.factor(results.reg$Away)
results.reg$Home <- fct_recode(results.reg$Home, "Kia Tigers" = "KIA Tigers")
results.reg$Home <- fct_recode(results.reg$Home, "KT Wiz" = "KT Wiz Suwon")
results.reg$Away <- fct_recode(results.reg$Away, "Kia Tigers" = "KIA Tigers")
results.reg$Away <- fct_recode(results.reg$Away, "KT Wiz" = "KT Wiz Suwon")
# Run Elo and Add to results.reg
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.4) + k(4*(abs(H.Score - A.Score)^(1/4))), data = results.reg)
# Dummy Schedule
schedule <- NA
teamlist <- current.elos$Team
schedule <- data.frame(schedule, Home = rep(teamlist, each = 80))
schedule <- data.frame(schedule, Away = rep(teamlist, times = 80))
schedule$schedule <- schedule$Home != schedule$Away
schedule <- schedule %>% filter(schedule == T) %>% select(-schedule)
# Set Number of Sims
nsim <- 100000
# Predictions
schedule$Prediction <- predict(elo, newdata = schedule)
schedule <- data.frame(schedule, Round = rep(1:nsim, each = nrow(schedule)))
schedule$Sim <- runif((nrow(schedule)),0,1)
schedule <- mutate(schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
schedule <- mutate(schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- schedule %>% group_by(Winner, Round) %>% count()
standings <- standings %>% arrange(desc(n)) %>% arrange(Round)
standings$Rank <- rep(1:10, max(standings$Round))
pred.1 <- standings %>% filter(Rank == 1) %>% group_by(Winner) %>% count()
pred.1$Pct <- (pred.1$n/nsim)
colnames(pred.1) <- c("Winner", "n", "First")
pred.2 <- standings %>% filter(Rank == 2) %>% group_by(Winner) %>% count()
pred.2$Pct <- (pred.2$n/nsim)
colnames(pred.2) <- c("Winner", "n", "Second")
pred.3 <- standings %>% filter(Rank == 3) %>% group_by(Winner) %>% count()
pred.3$Pct <- (pred.3$n/nsim)
colnames(pred.3) <- c("Winner", "n", "Third")
pred.4 <- standings %>% filter(Rank == 4) %>% group_by(Winner) %>% count()
pred.4$Pct <- (pred.4$n/nsim)
colnames(pred.4) <- c("Winner", "n", "Fourth")
pred.5 <- standings %>% filter(Rank == 5) %>% group_by(Winner) %>% count()
pred.5$Pct <- (pred.5$n/nsim)
colnames(pred.5) <- c("Winner", "n", "Fifth")
pred.6 <- standings %>% filter(Rank > 5) %>% group_by(Winner) %>% count()
pred.6$Pct <- (pred.6$n/nsim)
colnames(pred.6) <- c("Winner", "n", "Out")
predictions <- ungroup(as.data.frame(standings$Winner[1:10]))
colnames(predictions) <- "Winner"
predictions <- pred.1 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.2 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.3 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.4 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.5 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.6 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions$Team <- predictions$Winner
predictions <- predictions %>% left_join(current.elos, by = "Team")
predictions <- predictions %>% ungroup() %>% select(-Winner)
predictions <- predictions %>%
mutate(First = percent(First, 1)) %>%
mutate(Second = percent(Second, 1)) %>%
mutate(Third = percent(Third, 1)) %>%
mutate(Fourth = percent(Fourth, 1)) %>%
mutate(Fifth = percent(Fifth, 1)) %>%
mutate(Out = percent(Out, 1))
teamstats <- read_csv("teamstats.csv")
predictions <- predictions %>% left_join(teamstats, by = "Team")
predictions <- predictions %>% select(Rank, Team, Elo, wRCplus, FIP, First, Second, Third, Fourth, Fifth, Out)
#write_csv(predictions, "predictions.csv")
View(predictions)
library(tidyverse)
library(elo)
library(ggplot2)
library(plotly)
library(scales)
setwd("~/Google Drive/KBO")
# Read Results, Sort By Date
results <- read_csv("kboresults.csv")
results$Date <- ISOdate(results$Year, results$Month, results$Day)
results <- results[order(results$Date),]
results <- results %>% select(-Month, -Day)
results <- results %>% filter(Home != "Dream") %>% filter(Home != "Nanum") %>% filter(Home != "East") %>% filter(Home != "West")
results <- results %>% filter(Away != "Dream") %>% filter(Away != "Nanum") %>% filter(Away != "East") %>% filter(Away != "West")
results$Home <- as.factor(results$Home)
results$Away <- as.factor(results$Away)
results$Home <- fct_recode(results$Home, "Kia Tigers" = "KIA Tigers")
results$Home <- fct_recode(results$Home, "KT Wiz" = "KT Wiz Suwon")
results$Away <- fct_recode(results$Away, "Kia Tigers" = "KIA Tigers")
results$Away <- fct_recode(results$Away, "KT Wiz" = "KT Wiz Suwon")
# Run Elo and Add to Results
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.25) + k(4*(abs(H.Score - A.Score)^(1/4))), data = results)
results$H.Elo <- elo[[1]][,7]
results$A.Elo <- elo[[1]][,8]
# Create Elo History Table, Fix Teams
home <- results %>% select(Date, Home, H.Elo)
away <- results %>% select(Date, Away, A.Elo)
cols <- c("Date", "Team", "Elo")
colnames(home) <- cols
colnames(away) <- cols
elo.history <- rbind(home,away)
# Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
write_csv(current.elos, "currentelos.csv")
# Plot All Teams
#plot <- ggplot() + geom_line(data = elo.history, aes(Date, Elo, color = Team))
#ggplotly(plot)
# Plot 10 Team Era
tenteam <- elo.history %>% filter(Date > ISOdate(2013,1,1))
write_csv(tenteam,"elohistory.csv")
#plot <- ggplot() + geom_line(data = tenteam, aes(Date, Elo, color = Team))
#ggplotly(plot)
# Plot Current Season
#current.season <- elo.history %>% filter(Date > ISOdate(max(results$Year),1,1))
#plot <- ggplot() + geom_line(data = current.season, aes(Date, Elo, color = Team))
#ggplotly(plot)
## Project 2020
# Dummy Regression
results.reg <- read_csv("kboresults2.csv")
results.reg$Date <- ISOdate(results.reg$Year, results.reg$Month, results.reg$Day)
results.reg <- results.reg[order(results.reg$Date),]
results.reg <- results.reg %>% select(-Month, -Day)
results.reg <- results.reg %>% filter(Home != "Dream") %>% filter(Home != "Nanum") %>% filter(Home != "East") %>% filter(Home != "West")
results.reg <- results.reg %>% filter(Away != "Dream") %>% filter(Away != "Nanum") %>% filter(Away != "East") %>% filter(Away != "West")
results.reg$Home <- as.factor(results.reg$Home)
results.reg$Away <- as.factor(results.reg$Away)
results.reg$Home <- fct_recode(results.reg$Home, "Kia Tigers" = "KIA Tigers")
results.reg$Home <- fct_recode(results.reg$Home, "KT Wiz" = "KT Wiz Suwon")
results.reg$Away <- fct_recode(results.reg$Away, "Kia Tigers" = "KIA Tigers")
results.reg$Away <- fct_recode(results.reg$Away, "KT Wiz" = "KT Wiz Suwon")
# Run Elo and Add to results.reg
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.5) + k(4*(abs(H.Score - A.Score)^(1/4))), data = results.reg)
# Dummy Schedule
schedule <- NA
teamlist <- current.elos$Team
schedule <- data.frame(schedule, Home = rep(teamlist, each = 80))
schedule <- data.frame(schedule, Away = rep(teamlist, times = 80))
schedule$schedule <- schedule$Home != schedule$Away
schedule <- schedule %>% filter(schedule == T) %>% select(-schedule)
# Set Number of Sims
nsim <- 100000
# Predictions
schedule$Prediction <- predict(elo, newdata = schedule)
schedule <- data.frame(schedule, Round = rep(1:nsim, each = nrow(schedule)))
schedule$Sim <- runif((nrow(schedule)),0,1)
schedule <- mutate(schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
schedule <- mutate(schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- schedule %>% group_by(Winner, Round) %>% count()
standings <- standings %>% arrange(desc(n)) %>% arrange(Round)
standings$Rank <- rep(1:10, max(standings$Round))
pred.1 <- standings %>% filter(Rank == 1) %>% group_by(Winner) %>% count()
pred.1$Pct <- (pred.1$n/nsim)
colnames(pred.1) <- c("Winner", "n", "First")
pred.2 <- standings %>% filter(Rank == 2) %>% group_by(Winner) %>% count()
pred.2$Pct <- (pred.2$n/nsim)
colnames(pred.2) <- c("Winner", "n", "Second")
pred.3 <- standings %>% filter(Rank == 3) %>% group_by(Winner) %>% count()
pred.3$Pct <- (pred.3$n/nsim)
colnames(pred.3) <- c("Winner", "n", "Third")
pred.4 <- standings %>% filter(Rank == 4) %>% group_by(Winner) %>% count()
pred.4$Pct <- (pred.4$n/nsim)
colnames(pred.4) <- c("Winner", "n", "Fourth")
pred.5 <- standings %>% filter(Rank == 5) %>% group_by(Winner) %>% count()
pred.5$Pct <- (pred.5$n/nsim)
colnames(pred.5) <- c("Winner", "n", "Fifth")
pred.6 <- standings %>% filter(Rank > 5) %>% group_by(Winner) %>% count()
pred.6$Pct <- (pred.6$n/nsim)
colnames(pred.6) <- c("Winner", "n", "Out")
predictions <- ungroup(as.data.frame(standings$Winner[1:10]))
colnames(predictions) <- "Winner"
predictions <- pred.1 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.2 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.3 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.4 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.5 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.6 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions$Team <- predictions$Winner
predictions <- predictions %>% left_join(current.elos, by = "Team")
predictions <- predictions %>% ungroup() %>% select(-Winner)
predictions <- predictions %>%
mutate(First = percent(First, 1)) %>%
mutate(Second = percent(Second, 1)) %>%
mutate(Third = percent(Third, 1)) %>%
mutate(Fourth = percent(Fourth, 1)) %>%
mutate(Fifth = percent(Fifth, 1)) %>%
mutate(Out = percent(Out, 1))
teamstats <- read_csv("teamstats.csv")
predictions <- predictions %>% left_join(teamstats, by = "Team")
predictions <- predictions %>% select(Rank, Team, Elo, wRCplus, FIP, First, Second, Third, Fourth, Fifth, Out)
#write_csv(predictions, "predictions.csv")
library(tidyverse)
library(elo)
library(ggplot2)
library(plotly)
library(scales)
setwd("~/Google Drive/KBO")
# Read Results, Sort By Date
results <- read_csv("kboresults.csv")
results$Date <- ISOdate(results$Year, results$Month, results$Day)
results <- results[order(results$Date),]
results <- results %>% select(-Month, -Day)
results <- results %>% filter(Home != "Dream") %>% filter(Home != "Nanum") %>% filter(Home != "East") %>% filter(Home != "West")
results <- results %>% filter(Away != "Dream") %>% filter(Away != "Nanum") %>% filter(Away != "East") %>% filter(Away != "West")
results$Home <- as.factor(results$Home)
results$Away <- as.factor(results$Away)
results$Home <- fct_recode(results$Home, "Kia Tigers" = "KIA Tigers")
results$Home <- fct_recode(results$Home, "KT Wiz" = "KT Wiz Suwon")
results$Away <- fct_recode(results$Away, "Kia Tigers" = "KIA Tigers")
results$Away <- fct_recode(results$Away, "KT Wiz" = "KT Wiz Suwon")
# Run Elo and Add to Results
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.5) + k(4*(abs(H.Score - A.Score)^(1/4))), data = results)
results$H.Elo <- elo[[1]][,7]
results$A.Elo <- elo[[1]][,8]
# Create Elo History Table, Fix Teams
home <- results %>% select(Date, Home, H.Elo)
away <- results %>% select(Date, Away, A.Elo)
cols <- c("Date", "Team", "Elo")
colnames(home) <- cols
colnames(away) <- cols
elo.history <- rbind(home,away)
# Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
write_csv(current.elos, "currentelos.csv")
# Plot All Teams
#plot <- ggplot() + geom_line(data = elo.history, aes(Date, Elo, color = Team))
#ggplotly(plot)
# Plot 10 Team Era
tenteam <- elo.history %>% filter(Date > ISOdate(2013,1,1))
write_csv(tenteam,"elohistory.csv")
#plot <- ggplot() + geom_line(data = tenteam, aes(Date, Elo, color = Team))
#ggplotly(plot)
# Plot Current Season
#current.season <- elo.history %>% filter(Date > ISOdate(max(results$Year),1,1))
#plot <- ggplot() + geom_line(data = current.season, aes(Date, Elo, color = Team))
#ggplotly(plot)
## Project 2020
# Dummy Regression
results.reg <- read_csv("kboresults2.csv")
results.reg$Date <- ISOdate(results.reg$Year, results.reg$Month, results.reg$Day)
results.reg <- results.reg[order(results.reg$Date),]
results.reg <- results.reg %>% select(-Month, -Day)
results.reg <- results.reg %>% filter(Home != "Dream") %>% filter(Home != "Nanum") %>% filter(Home != "East") %>% filter(Home != "West")
results.reg <- results.reg %>% filter(Away != "Dream") %>% filter(Away != "Nanum") %>% filter(Away != "East") %>% filter(Away != "West")
results.reg$Home <- as.factor(results.reg$Home)
results.reg$Away <- as.factor(results.reg$Away)
results.reg$Home <- fct_recode(results.reg$Home, "Kia Tigers" = "KIA Tigers")
results.reg$Home <- fct_recode(results.reg$Home, "KT Wiz" = "KT Wiz Suwon")
results.reg$Away <- fct_recode(results.reg$Away, "Kia Tigers" = "KIA Tigers")
results.reg$Away <- fct_recode(results.reg$Away, "KT Wiz" = "KT Wiz Suwon")
# Run Elo and Add to results.reg
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.5) + k(4*(abs(H.Score - A.Score)^(1/4))), data = results.reg)
# Dummy Schedule
schedule <- NA
teamlist <- current.elos$Team
schedule <- data.frame(schedule, Home = rep(teamlist, each = 80))
schedule <- data.frame(schedule, Away = rep(teamlist, times = 80))
schedule$schedule <- schedule$Home != schedule$Away
schedule <- schedule %>% filter(schedule == T) %>% select(-schedule)
# Set Number of Sims
nsim <- 100000
# Predictions
schedule$Prediction <- predict(elo, newdata = schedule)
schedule <- data.frame(schedule, Round = rep(1:nsim, each = nrow(schedule)))
schedule$Sim <- runif((nrow(schedule)),0,1)
schedule <- mutate(schedule, H.Win = ifelse(Sim < Prediction, 1, 0))
schedule <- mutate(schedule, Winner = ifelse(H.Win == 1, as.character(Home), as.character(Away)))
standings <- schedule %>% group_by(Winner, Round) %>% count()
standings <- standings %>% arrange(desc(n)) %>% arrange(Round)
standings$Rank <- rep(1:10, max(standings$Round))
pred.1 <- standings %>% filter(Rank == 1) %>% group_by(Winner) %>% count()
pred.1$Pct <- (pred.1$n/nsim)
colnames(pred.1) <- c("Winner", "n", "First")
pred.2 <- standings %>% filter(Rank == 2) %>% group_by(Winner) %>% count()
pred.2$Pct <- (pred.2$n/nsim)
colnames(pred.2) <- c("Winner", "n", "Second")
pred.3 <- standings %>% filter(Rank == 3) %>% group_by(Winner) %>% count()
pred.3$Pct <- (pred.3$n/nsim)
colnames(pred.3) <- c("Winner", "n", "Third")
pred.4 <- standings %>% filter(Rank == 4) %>% group_by(Winner) %>% count()
pred.4$Pct <- (pred.4$n/nsim)
colnames(pred.4) <- c("Winner", "n", "Fourth")
pred.5 <- standings %>% filter(Rank == 5) %>% group_by(Winner) %>% count()
pred.5$Pct <- (pred.5$n/nsim)
colnames(pred.5) <- c("Winner", "n", "Fifth")
pred.6 <- standings %>% filter(Rank > 5) %>% group_by(Winner) %>% count()
pred.6$Pct <- (pred.6$n/nsim)
colnames(pred.6) <- c("Winner", "n", "Out")
predictions <- ungroup(as.data.frame(standings$Winner[1:10]))
colnames(predictions) <- "Winner"
predictions <- pred.1 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.2 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.3 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.4 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.5 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions <- pred.6 %>% select(-n) %>% right_join(predictions, by = "Winner")
predictions$Team <- predictions$Winner
predictions <- predictions %>% left_join(current.elos, by = "Team")
predictions <- predictions %>% ungroup() %>% select(-Winner)
predictions <- predictions %>%
mutate(First = percent(First, 1)) %>%
mutate(Second = percent(Second, 1)) %>%
mutate(Third = percent(Third, 1)) %>%
mutate(Fourth = percent(Fourth, 1)) %>%
mutate(Fifth = percent(Fifth, 1)) %>%
mutate(Out = percent(Out, 1))
teamstats <- read_csv("teamstats.csv")
predictions <- predictions %>% left_join(teamstats, by = "Team")
predictions <- predictions %>% select(Rank, Team, Elo, wRCplus, FIP, First, Second, Third, Fourth, Fifth, Out)
write_csv(predictions, "predictions.csv")
## Update Pages
render(~Google Drive/KBO/kbofancystats/content/elo.rmd)
## Update Pages
render(~/Google Drive/KBO/kbofancystats/content/elo.rmd)
## Update Pages
render('~/Google Drive/KBO/kbofancystats/content/elo.rmd')
render('~/Google Drive/KBO/kbofancystats/content/elohistory.rmd')
library(blogdown)
library(rmarkdown)
setwd("~/Google Drive/KBO/kbofancystats")
#render_site()
serve_site()
View(elo.history)
class(elo.history$Date)
# Neaten
elo.history$Date <- as.Date(elo.history$Date)
?round
elo.history$Elo <- round(elo.history$Elo, digits = 0)
write_csv(current.elos, "currentelos.csv")
## Update Pages
setwd("~/Google Drive/KBO/kbofancystats")
serve_site()
setwd("~/Google Drive/KBO")
# Plot 10 Team Era
tenteam <- elo.history %>% filter(Date > ISOdate(2013,1,1))
write_csv(tenteam,"elohistory.csv")
library(blogdown)
library(rmarkdown)
setwd("~/Google Drive/KBO/kbofancystats")
render_site()
serve_site()
library(tidyverse)
setwd("~/Google Drive/KBO/kbofancystats/content/teams")
batters <- read_csv("~/Google Drive/KBO/batters_simple.csv")
pitchers <- read_csv("~/Google Drive/KBO/pitchers_simple.csv")
list <- batters %>% filter(Season == "2019") %>% select(Team)
list <- unique(list$Team)
batleaders <- batters %>% select(Name.mykbo, Position, WAR, Season, Team)
pitleaders <- pitchers %>% select(Name.mykbo, Position, WAR, Season, Team)
leaders <- rbind(batleaders, pitleaders)
tops <- leaders %>% filter(Season == "2019") %>% group_by(Team) %>% top_n(3, WAR)
tops <- tops[order(-tops$WAR),]
tops$WAR <- round(tops$WAR, 2)
current.elos <- read_csv("~/Google Drive/KBO/currentelos.csv")
current.elos$Elo <- round(current.elos$Elo, 0)
cities <- read_csv("~/Google Drive/KBO/teamcities.csv")
tops <- tops %>% left_join(cities, by = "Team")
for (i in list){
top <- tops %>% filter(Team == i)
top3 <- paste0("2019 WAR Leader | ",top[1,1],", ",top[1,2],": ",top[1,3])
elo <- current.elos %>% filter(Team == i)
elo <- paste0(top[1,6]," | Current Elo: ",elo[1,2]," (",elo[1,3],")")
a <- "---"
b <- 'date: "2020-03-31"'
c <- paste0("summary: ","'", top3,"'")
d <- paste0("title: ","'", i,"'")
da <- paste0("subtitle: ","'", elo,"'")
db <- "image:"
dc <- "  preview_only: true"
ea <- "**2019** | [Batting](#batting) | [Pitching](#pitching) | "
eb <- " "
e <- "### 2019 Batting Stats {#batting}"
f <- "```{r pressure, echo=F,warning=FALSE,message=FALSE}"
g <- "library(tidyverse)"
h <- "library(knitr)"
j <- "library(kableExtra)"
k <- 'batters <- read_csv("~/Google Drive/KBO/batters_simple.csv")'
l <- "batters <- batters[complete.cases(batters),]"
m <- "batters$Age <- as.numeric(batters$Age)"
n <- paste0('d <- batters %>% filter(Team == "', i, '") %>% filter(Season == "2019") %>% select(-Team, -Season, -KName)')
o <- "d <- d[order(-d$WAR),]"
p <- 'd$Name.mykbo <- paste0("[", d$Name.mykbo, "](/players/", d$ID, ")")'
q <- 'kable(d, digits = c(0,0,0,0,0,0,3,1,1,3,3,1,2), col.names = c("Name","Pos","Age","G","PA","HR","OPS","BB%","SO%","ISO","BABIP","wRC+","WAR")) %>% kable_styling(bootstrap_options = c("striped", "hover"), fixed_thead = T) %>%column_spec(1, bold = T, border_right = F)'
r <- "```"
rr <- "***"
s <- "### 2019 Pitching Stats {#pitching}"
t <- "```{r, echo=F,warning=FALSE,message=FALSE}"
u <- 'pitchers <- read_csv("~/Google Drive/KBO/pitchers_simple.csv")'
v <- 'pitchers <- pitchers[complete.cases(pitchers),]'
w <- paste0('d <- pitchers %>% filter(Team == "', i, '") %>% filter(Season == "2019") %>% select(-Team, -Season, -KName, -Position)')
x <- 'd <- d[order(-d$WAR),]'
y <- 'd$Name.mykbo <- paste0("[", d$Name.mykbo, "](/players/", d$ID, ")")'
ab <- "d <- d %>% select(-ID, -Name)"
z <- 'kable(d, digits = c(0,0,0,0,0,1,1,1,3,2,2,2), col.names = c("Name","Age","G","GS","IP","K/9","BB/9","HR/9","BABIP","ERA","FIP","WAR")) %>% kable_styling(bootstrap_options = c("striped", "hover"), fixed_thead = T) %>% column_spec(1, bold = T, border_right = F)'
teamwd <- paste0("~/Google Drive/KBO/kbofancystats/content/teams/",gsub("[[:space:]]", "", i))
setwd(teamwd)
file <- "index.rmd"
writeLines(c(a,b,c,d,da,db,dc,a,ea,eb,rr,e,f,g,h,j,k,l,m,n,o,p,ab,q,r,rr,s,t,u,v,w,x,y,ab,z,r), file)
}
setwd("~/Google Drive/KBO/kbofancystats/content/players")
list <- batters %>% filter(Season == "2019") %>% select(Name.mykbo, ID, KName, Team, Position)
for (i in 1:nrow(list)){
title <- paste0(list$Name.mykbo[i], " | ", list$KName[i])
subtitle <- paste0(list$Team[i], " | ", list$Position[i])
id <- list$ID[i]
a <- "---"
b <- paste0('title: ', title)
bb <- paste0('subtitle: ', subtitle)
bc <- 'summary: "Career Stats"'
c <- "```{r pressure, echo=F,warning=FALSE,message=FALSE}"
d <- "library(tidyverse)"
e <- "library(knitr)"
f <- "library(kableExtra)"
g <- 'batters <- read_csv("~/Google Drive/KBO/batters_simple.csv")'
h <- 'batters$Age <- as.numeric(batters$Age)'
j <- paste0('d <- batters %>% filter(ID == "', id, '") %>% select(-Name, -Name.mykbo, -KName, -Position, -ID)')
k <- 'd <- d[order(-d$Season),]'
l <- 'kable(d, digits = c(0,0,0,0,0,0,3,1,1,3,3,1,2), col.names = c("Season","Team","Age","G","PA","HR","OPS","BB%","SO%","ISO","BABIP","wRC+","WAR")) %>% kable_styling(bootstrap_options = c("striped", "hover"), fixed_thead = T)'
m <- "```"
n <- '### Career Progression'
o <- "```{r, echo=F,warning=FALSE,message=FALSE}"
p <- 'library(ggplot2)'
q <- 'if(nrow(d) > 1){ggplot() + geom_line(aes(x = d$Age,y = d$wRCplus), size = 2, color = "#0f1b34") + theme_minimal() + labs(x = "Age", y = "wRC+")}'
file <- paste0(gsub("[[:space:]]", "", id), ".rmd")
writeLines(c(a,b,bb,bc,a,c,d,e,f,g,h,j,k,l,m), file)
}
setwd("~/Google Drive/KBO/kbofancystats/content/players")
list <- pitchers %>% filter(Season == "2019") %>% select(Name.mykbo, ID, KName, Team, Position)
for (i in 1:nrow(list)){
title <- paste0(list$Name.mykbo[i], " | ", list$KName[i])
subtitle <- paste0(list$Team[i], " | ", list$Position[i])
id <- list$ID[i]
a <- "---"
b <- paste0('title: ', title)
bb <- paste0('subtitle: ', subtitle)
bc <- 'summary: "Career Stats"'
c <- "```{r pressure, echo=F,warning=FALSE,message=FALSE}"
d <- "library(tidyverse)"
e <- "library(knitr)"
f <- "library(kableExtra)"
g <- 'pitchers <- read_csv("~/Google Drive/KBO/pitchers_simple.csv")'
j <- paste0('d <- pitchers %>% filter(ID == "', id, '") %>% select(-Name, -Name.mykbo, -KName, -Position, -ID)')
k <- 'd <- d[order(-d$Season),]'
l <- 'kable(d, digits = c(0,0,0,0,0,0,1,1,1,3,2,2,2), col.names = c("Season","Team","Age","G","GS","IP","K/9","BB/9","HR/9","BABIP","ERA","FIP","WAR")) %>% kable_styling(bootstrap_options = c("striped", "hover"), fixed_thead = T)'
m <- "```"
n <- '### Career Progression'
o <- "```{r, echo=F,warning=FALSE,message=FALSE}"
p <- 'library(ggplot2)'
q <- 'if(nrow(d) > 1){ggplot() + geom_line(aes(x = d$Age,y = d$FIP), size = 2, color = "#0f1b34") + theme_minimal() + labs(x = "Age", y = "FIP")}'
file <- paste0(gsub("[[:space:]]", "", id), ".rmd")
writeLines(c(a,b,bb,bc,a,c,d,e,f,g,j,k,l,m), file)
}
